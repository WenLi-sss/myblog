<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SOME</title>
    <url>/2020/08/29/%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="/images/20200829.jpg"></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>CSS中before和after伪类的用法</title>
    <url>/2020/11/18/CSS%E4%B8%ADbefore%E5%92%8Cafter%E4%BC%AA%E7%B1%BB%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<a id="more"></a>

<p>1、：after清除浮动</p>
<p>浮动布局导致高度坍塌影响到整体布局时元素需要清除浮动，使用after就是其中的一种方法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.row</span><span class="selector-pseudo">:after</span> &#123; </span><br><span class="line">	<span class="attribute">width</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、：before和：after圆环旋转</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container ring&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>圆环旋转<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//CSS</span><br><span class="line">* &#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> dashed <span class="built_in">rgb</span>(<span class="number">204</span>, <span class="number">204</span>, <span class="number">204</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">158</span>, <span class="number">234</span>, <span class="number">106</span>);</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">line-height</span>: <span class="number">80px</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> circle&#123;</span><br><span class="line">	0%&#123; <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">0deg</span>); &#125;</span><br><span class="line">	100%&#123; <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">360deg</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-animation</span>: circle <span class="number">4s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">-webkit-animation</span>: circle <span class="number">4s</span> infinite linear;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">border-color</span>: <span class="built_in">rgba</span>(<span class="number">204</span>, <span class="number">204</span>, <span class="number">204</span>, .<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:active</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">border-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>, <span class="number">234</span>, <span class="number">106</span>, .<span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:active</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>,</span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &gt; <span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.ring</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、：before和：after小三角</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;triangle&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>仿微信聊天<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;textLeft&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>吃了没？<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;textRight&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>嗯嗯，在吃呢，你呢。<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//CSS</span><br><span class="line">* &#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.textRight</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-pseudo">:before</span>, </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span><span class="selector-class">.textLeft</span> <span class="selector-tag">span</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">8px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span><span class="selector-class">.textRight</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">8px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>带边框添加样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span> <span class="selector-tag">li</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-class">.textLeft</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">8px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.triangle</span> <span class="selector-class">.textRight</span> <span class="selector-tag">span</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">8px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4、：before和：after小图标</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>图标<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-power&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-pause&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-stop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-comment&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-like&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-home&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-photo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-email&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-file&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-history&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-video&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-tags&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-phone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-profile&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//CSS</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">650px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">	<span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-power</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-power</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">7px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">8px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">13px</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-play</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-play</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">11px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">17px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">9px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-pause</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-pause</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">0px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">8px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">8px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>; </span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">4px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-stop</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-stop</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">17px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">17px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-comment</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-comment</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">28px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">28px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-comment</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;....&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-like</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">55%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">55deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">55deg</span>);</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-like</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">55%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">110deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-<span class="number">110deg</span>);</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">8px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-search</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">4px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-search</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-home</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-home</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">12px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-home</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">20px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">38px</span>;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-photo</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-photo</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">13px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">13px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-photo</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">7px</span>;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-photo</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon-email</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-email</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-email</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">25px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-file</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-file</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">10px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">10px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">4px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-file</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">3px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">3px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-history</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-history</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">	<span class="attribute">border-bottom</span>: <span class="number">4px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">14px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-video</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-video</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">11px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-right</span>: <span class="number">11px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-video</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">6px</span> solid transparent;</span><br><span class="line">	<span class="attribute">border-top</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">13px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">35px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-tags</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">35%</span> <span class="number">0%</span> <span class="number">0%</span> <span class="number">35%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">35px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-tags</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">7px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-phone</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span><br><span class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-<span class="number">30deg</span>);</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">margin-right</span>: <span class="number">0px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-phone</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">2px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-phone</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">20%</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">3px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">34px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-profile</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">45%</span> <span class="number">45%</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.icon-profile</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">	<span class="attribute">background</span>: <span class="number">#9EEA6A</span>;</span><br><span class="line">	<span class="attribute">border-radius</span>: <span class="number">40%</span>;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">	<span class="attribute">top</span>: -<span class="number">22px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法汇集</title>
    <url>/2020/11/18/%E7%AE%97%E6%B3%95%E6%B1%87%E9%9B%86/</url>
    <content><![CDATA[<p>2020.11.18记</p>
<a id="more"></a>

<h4 id="1、剑指offer03数组中重复的数字"><a href="#1、剑指offer03数组中重复的数字" class="headerlink" title="1、剑指offer03数组中重复的数字"></a>1、剑指offer03数组中重复的数字</h4><p>找出数组中重复的数字。</p>
<p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p>
<p>示例 1：</p>
<p>输入：<br>[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var findRepeatNumber &#x3D; function(nums) &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    法一</span><br><span class="line">    &#x2F;* </span><br><span class="line">            数组排完序后，相等的数就会相邻。</span><br><span class="line">            于是循环直接比较就好，遇到相等的就返回该值。</span><br><span class="line">    *&#x2F;</span><br><span class="line">    nums.sort();</span><br><span class="line">    for(var i&#x3D;0;i&lt;nums.length-1;i++)&#123;</span><br><span class="line">        if(nums[i]&#x3D;&#x3D;nums[i+1]) return nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var findRepeatNumber &#x3D; function(nums) &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    *法二：</span><br><span class="line">        用对象来存储某个数是否出现过，如果第一次出现就添加属性标识为true，否则就直接返回</span><br><span class="line">    *&#x2F;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    var flag&#x3D;&#123;&#125;;</span><br><span class="line">    for(var i&#x3D;0;i&lt;nums.length;i++)&#123;</span><br><span class="line">        if(!flag[nums[i]]) flag[nums[i]]&#x3D;true;</span><br><span class="line">        else return nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、剑指offer05替换空格"><a href="#2、剑指offer05替换空格" class="headerlink" title="2、剑指offer05替换空格"></a>2、剑指offer05替换空格</h4><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p>
<p>示例 1：</p>
<p>输入：s = “We are happy.”<br>输出：”We%20are%20happy.”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;法一</span><br><span class="line">&#x2F;&#x2F;正则表达式替换</span><br><span class="line">var replaceSpace &#x3D; function(s) &#123;</span><br><span class="line">    return s.replace(&#x2F; &#x2F;g, &quot;%20&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*整体思路如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">遍历原字符串，统计空格和非空格字符个数，计算替换后的新字符的长度</span></span><br><span class="line"><span class="comment">准备两个指针，指针 i 指向原字符串，指针 j 指向新字符串</span></span><br><span class="line"><span class="comment">i 从头开始遍历原字符串</span></span><br><span class="line"><span class="comment">str[i]是非空格，那么将 i 指向的字符放入新字符串的 j 位置。i 和 j 都增加 1。</span></span><br><span class="line"><span class="comment">str[i]是空格，那么 j 指向的位置依次填入%20。i 增加 1，j 增加 3。</span></span><br><span class="line"><span class="comment">时间复杂度是 O(N)。因为需要对新字符串开辟容器，空间复杂度是 O(N)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!s || !s.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="keyword">var</span> chs[];</span><br><span class="line">    <span class="comment">// i 是新字符串的下标</span></span><br><span class="line">    <span class="comment">// j 是原字符串的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; s.length; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[j] === <span class="string">&quot; &quot;</span>) &#123;</span><br><span class="line">            chs[i++] = <span class="string">&quot;%&quot;</span>;</span><br><span class="line">            chs[i++] = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">            chs[i++] = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chs[i++] = s[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chs.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>JS算法</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中box-sizing的用法</title>
    <url>/2020/11/18/CSS%E4%B8%ADbox-sizing%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>学会使用box-sizing布局</p>
<a id="more"></a>

<p>box-sizing:content-box<code>|</code>border-box<code>|</code>inherit</p>
<p>content-box：标准盒模型，CSS定义的宽高只包含content的宽高<br>border-box：IE盒模型，CSS定义的宽高包括了content，padding和border</p>
<p><a href="https://www.jianshu.com/p/e2eb0d8c9de6">参考链接：学会使用box-sizing布局</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>原生JS实现动态插入和删除DOM元素</title>
    <url>/2020/11/07/%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4DOM%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>2020.11.7记</p>
<a id="more"></a>

<p>html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=UTF<span class="number">-8</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;js/tset.js&quot;</span>&gt;</span><br><span class="line">   </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">    &lt;li&gt;HTML&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;CSS&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;JS&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;input id=<span class="string">&quot;txt&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;要插入的内容&quot;</span>&gt;</span><br><span class="line">&lt;input id=<span class="string">&quot;btn1&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;尾插&quot;</span>&gt;</span><br><span class="line">&lt;input id=<span class="string">&quot;btn2&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;首插&quot;</span>&gt;</span><br><span class="line">&lt;input id=<span class="string">&quot;btn3&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;删除&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/html&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.title=<span class="string">&quot;插入元素&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> oBtn1=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">    oBtn1.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUl=<span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oTxt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;txt&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oLi1=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> value=oTxt.value;</span><br><span class="line">    <span class="keyword">var</span> textNode=<span class="built_in">document</span>.createTextNode(value);</span><br><span class="line">    oLi1.appendChild(textNode);</span><br><span class="line">    oUl.appendChild(oLi1);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> oBtn2=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line">    oBtn2.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUl=<span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oTxt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;txt&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oLi2=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> value=oTxt.value;</span><br><span class="line">    <span class="keyword">var</span> textNode=<span class="built_in">document</span>.createTextNode(value);</span><br><span class="line">    oLi2.appendChild(textNode);</span><br><span class="line">    oUl.insertBefore(oLi2,oUl.firstElementChild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> oBtn3=<span class="built_in">document</span>.getElementById(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">    oBtn3.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUl=<span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oTxt=<span class="built_in">document</span>.getElementById(<span class="string">&quot;txt&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> oLi=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> value=oTxt.value;</span><br><span class="line">    <span class="keyword">var</span> flag;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt; oLi.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(oLi[i].innerHTML !== value)&#123;</span><br><span class="line">            flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            oUl.removeChild(oLi[i]);</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">1</span>)&#123;</span><br><span class="line">        alert(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs函数与对象</title>
    <url>/2020/09/30/Nodejs%E5%87%BD%E6%95%B0%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>2020.9.30记</p>
<a id="more"></a>

<h3 id="1-ES6"><a href="#1-ES6" class="headerlink" title="1.ES6"></a>1.ES6</h3><h4 id="1-函数中的参数"><a href="#1-函数中的参数" class="headerlink" title="(1)函数中的参数"></a>(1)函数中的参数</h4><p> ES6允许为参数设置默认值，如果没有传递实参，自动调用形参的默认值</p>
<h4 id="2-模板字符串"><a href="#2-模板字符串" class="headerlink" title="(2)模板字符串"></a>(2)模板字符串</h4><p>  一组字符串，可以直接写JS  <code>$&#123;js表达式&#125;</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个对象，保存一个员工的对象(姓名，性别0/1，生日，工资)；使用模板字符串打印员工的信息，性别0显示女，1显示男</span></span><br><span class="line"><span class="keyword">var</span> emp=&#123;</span><br><span class="line">  ename:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  sex:<span class="number">1</span>,</span><br><span class="line">  birthday:<span class="string">&#x27;1997-9-20&#x27;</span>,</span><br><span class="line">  salary:<span class="number">8000</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">  姓名：<span class="subst">$&#123;emp.ename&#125;</span></span></span><br><span class="line"><span class="string">  性别：<span class="subst">$&#123;emp.sex==<span class="number">0</span> ? <span class="string">&#x27;女&#x27;</span> : <span class="string">&#x27;男&#x27;</span>&#125;</span></span></span><br><span class="line"><span class="string">  生日：<span class="subst">$&#123;emp.birthday&#125;</span></span></span><br><span class="line"><span class="string">  工资：<span class="subst">$&#123;emp.salary&#125;</span></span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="comment">// 姓名：tom</span></span><br><span class="line"><span class="comment">//性别：男</span></span><br><span class="line"><span class="comment">//生日：1997-9-20</span></span><br><span class="line"><span class="comment">//工资：8000</span></span><br></pre></td></tr></table></figure>

<h3 id="2-nodejs概述"><a href="#2-nodejs概述" class="headerlink" title="2.nodejs概述"></a>2.nodejs概述</h3><p> nodejs基于谷歌V8引擎，运行在服务器端的语言，基于JS</p>
<p> 对比JS和nodejs</p>
<p> (1)JS运行在客户端浏览器，存在多个浏览器，容易产生兼容性的问题；nodejs在服务器端只有一个环境，不存在兼容性。</p>
<p> (2)两者都有内置(ES)对象、自定义对象、宿主对象(根据执行环境的不同划分)</p>
<p> (3)JS用于网页中的交互效果，nodejs用于服务器的操作，例如web服务器创建，数据库操作，文件操作等</p>
<p>  nodejs.org  英文官网</p>
<p>  nodejs.cn  中文网</p>
<p> nodejs的特点</p>
<p>  单线程逻辑处理</p>
<p>  非阻塞的异步I/O处理</p>
<p>  支持数万个并发连接</p>
<p> nodejs的应用场景</p>
<p>  基于社交网络的大规模web应用 </p>
<p> nodejs不适合CPU密集型的应用</p>
<p>  递归、数据加密解密、数据挖掘和数据分析</p>
<p> nodejs的执行方式</p>
<p>  脚本模式  node  c:/xampp/…/1.js</p>
<p>  交互模式  </p>
<p>   node  回车  进入交互模式</p>
<p>   两次ctrl+c  或者  .exit   退出交互模式</p>
<h3 id="3-全局对象"><a href="#3-全局对象" class="headerlink" title="3.全局对象"></a>3.全局对象</h3><p> 全局作用域下的变量就是全局对象下的属性，全局对象下的函数就是全局对象下的方法，可以使用全局对象来访问</p>
<p> nodejs: global</p>
<p> 在交互模式下，声明的变量和创建的函数都属于全局下的，可以使用global来访问；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//局部的</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用global来访问a和fn</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">global</span>.a);</span><br><span class="line"><span class="built_in">global</span>.fn();</span><br></pre></td></tr></table></figure>



<p> 在脚本模式下，声明的变量和创建的函数都不属于全局下的，一个文件默认会创建一个独立的作用域，叫做文件（模块）作用域，防止污染全局。</p>
<p> js: window</p>
<p> 在浏览器下，文件中声明的变量或者创建的函数都属于是全局作用域下的，会污染全局。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用全局对象来访问</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a);</span><br><span class="line"><span class="built_in">window</span>.fn();</span><br></pre></td></tr></table></figure>



<h4 id="1-console对象——控制台"><a href="#1-console对象——控制台" class="headerlink" title="(1)console对象——控制台"></a>(1)console对象——控制台</h4><p>  global.console.log()  打印日志</p>
<p>  global.console.info() 打印消息</p>
<p>  global.console.warn()  打印自定义的警告</p>
<p>  global.console.error()  打印自定义的错误</p>
<p>  global.console.time(‘自定义字符串’)  开始计时</p>
<p>  global.console.timeEnd(‘自定义字符串’)  结束计时</p>
<p>  自定义字符串前后保持一致</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检测程序的耗时</span></span><br><span class="line"><span class="comment">//计时查看for、while、dowhile循环10000的耗时</span></span><br><span class="line"><span class="built_in">global</span>.console.time(<span class="string">&#x27;for&#x27;</span>);<span class="comment">//开始计时</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">10000</span>;i++)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>.console.timeEnd(<span class="string">&#x27;for&#x27;</span>);<span class="comment">//结束计时</span></span><br><span class="line"><span class="comment">//for: 1.296ms</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.console.time(<span class="string">&#x27;while&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">10000</span>)&#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>.console.timeEnd(<span class="string">&#x27;while&#x27;</span>);</span><br><span class="line"><span class="comment">//while: 0.186ms</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">global</span>.console.time(<span class="string">&#x27;dowhile&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">10000</span>);</span><br><span class="line"><span class="built_in">global</span>.console.timeEnd(<span class="string">&#x27;dowhile&#x27;</span>);</span><br><span class="line"><span class="comment">//dowhile: 0.225ms</span></span><br></pre></td></tr></table></figure>

<h4 id="2-process对象——进程"><a href="#2-process对象——进程" class="headerlink" title="(2)process对象——进程"></a>(2)process对象——进程</h4><p> process.arch  查看当前CPU的架构</p>
<p> process.platform  查看当前的操作系统</p>
<p> process.env  查看当前系统的环境变量</p>
<p> process.version  查看当前nodejs的版本号</p>
<p> process.pid  查看当前的进程编号</p>
<p> process.kill()  结束某个编号的进程</p>
<h4 id="3-Buffer对象——缓冲区"><a href="#3-Buffer对象——缓冲区" class="headerlink" title="(3)Buffer对象——缓冲区"></a>(3)Buffer对象——缓冲区</h4><p> 一块用于临时存储数据的内存区域，可以存储文件数据、网络上传输的资源(视频、在线直播…)</p>
<p> 创建Buffer</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> buf=<span class="built_in">global</span>.Buffer.alloc(<span class="number">5</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf);<span class="comment">//&lt;Buffer 61 61 61 61 61&gt;</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.toString());<span class="comment">//aaaaa</span></span><br></pre></td></tr></table></figure>

<p>   var buf=Buffer.alloc(5, ‘abcde’)</p>
<p>   buffer数据 &lt;Buffer 61 62 63 64 65&gt;</p>
<p> 将buffer数据转为字符串</p>
<p>   buf.toString()</p>
<h3 id="4-模块"><a href="#4-模块" class="headerlink" title="4.模块"></a>4.模块</h3><p> 模块就是一个封装好的功能体</p>
<p> 在nodejs下模块分为自定义模块、核心模块(官方提供)、第三方模块</p>
<h4 id="1-自定义模块"><a href="#1-自定义模块" class="headerlink" title="(1)自定义模块"></a>(1)自定义模块</h4><p>  在nodejs下，任意一个js文件都是一块模块，文件中的代码默认被一个构造函数所包含</p>
<p><strong>(function(exports,require,module,__filename,__dirname){ //程序员编写的代码})</strong></p>
<p><strong>filename  当前模块的完整路径和文件名称</strong></p>
<p>dirname  当前模块的完整路径</p>
<p>require() 引入一个模块</p>
<p>module  指代当前的模块对象</p>
<p>module.exports  当前模块导出的对象，包含供其它模块使用的属性和方法</p>
<p>exports 等价于module.exports</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(_filename);<span class="comment">//当前模块的完整路径和文件名称</span></span><br><span class="line"><span class="built_in">console</span>.log(_dirname);<span class="comment">//当前模块的完整路径</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./02.js&#x27;</span>)<span class="comment">//引入同一级的02.js模块</span></span><br><span class="line"><span class="comment">//把02.js模块导出的结果放入到变量中</span></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">require</span>(<span class="string">&#x27;./02.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.mya);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">obj.fn();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;02.js</span><br><span class="line">console.log(&#39;02.js&#39;);</span><br><span class="line">var a&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;导出：公开哪些变量或者函数</span><br><span class="line">&#x2F;&#x2F;默认导出的是一个空对象</span><br><span class="line">&#x2F;&#x2F;添加导出的内容，就是往导出的对象中添加属性和方法</span><br><span class="line">&#x2F;&#x2F;module 指代当前的模块对象</span><br><span class="line">&#x2F;&#x2F;module.exports 当前模块导出的对象，包含供其他模块是用的属性和方法</span><br><span class="line">module.exports.mya&#x3D;a;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在02.js中声明变量b，创建函数fn，导出变量和函数</span><br><span class="line">console.log(&#39;02.js&#39;);</span><br><span class="line">var a&#x3D;1;</span><br><span class="line">var b&#x3D;2;</span><br><span class="line">function fn()&#123;</span><br><span class="line">console.log(3);</span><br><span class="line">&#125;</span><br><span class="line">module.exports.mya&#x3D;a;</span><br><span class="line">module.exports.b&#x3D;b;</span><br><span class="line">module.exports.fn&#x3D;fn;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>  创建两个模块main.js（主模块），circle.js(功能模块)，在功能模块中创建两个函数，传递1个参数半径，计算圆的周长和面积，导出这两个函数；在主模块中引入功能模块，并调用两个方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> obj=<span class="built_in">require</span>(<span class="string">&#x27;./circle.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(circle);</span><br><span class="line"><span class="built_in">console</span>.log(obj.getLength(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(obj.getArea(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//circle.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>*<span class="built_in">Math</span>.PI*r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.PI*<span class="built_in">Math</span>.row(r,<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.getCircle=getCircle;</span><br><span class="line"><span class="built_in">module</span>.exports.getArea=getArea;</span><br></pre></td></tr></table></figure>

<h3 id="5-模块分类"><a href="#5-模块分类" class="headerlink" title="5.模块分类"></a>5.模块分类</h3><p>文件模块：</p>
<p>以路径开头：require(‘./circle.js’)常用于用户自定义的模块，如果后缀名是js，则可以省略</p>
<p>不以路径开头：require(‘url’)用于引入官方提供的核心模块</p>
<p>目录模块：</p>
<p>以路径开头：require(‘./02_2’)在02_2目录下寻找package.json中寻找main属性对应的文件，找不到会去引入index.js</p>
<p>不以路径开头：require(‘04_2’)自动到当前目录下的node_modules中寻找目录模块04_2,如果找不到，会到上一级目录下寻找，知道顶级目录，常用于第三方模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;a&quot;</span>:<span class="string">&quot;test.js&quot;</span><span class="comment">//a为属性名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-npm和包"><a href="#6-npm和包" class="headerlink" title="6.npm和包"></a>6.npm和包</h3><p> 包(package): 是一个目录模块，里边包含多个文件，其中有一个文件命名为package.json，是包说明文件，含有包的信息</p>
<p> npm: 包管理工具，安装nodejs的时候会附带安装，用于管理包，包括下载，上传，升级…</p>
<p> npm官网： <a href="http://www.npmjs.com/">www.npmjs.com</a></p>
<h4 id="1-切换目录"><a href="#1-切换目录" class="headerlink" title="(1)切换目录"></a>(1)切换目录</h4><p>  cd 完整路径 如果要进入其它的盘符  d:  回车</p>
<p>  进入指定目录下，按住shift键，在空白区域单击鼠标右键-&gt;在此处打开powershell</p>
<h4 id="2-使用npm下载安装第三方包"><a href="#2-使用npm下载安装第三方包" class="headerlink" title="(2)使用npm下载安装第三方包"></a>(2)使用npm下载安装第三方包</h4><p>  npm install 包名称</p>
<h4 id="3-生成package-json"><a href="#3-生成package-json" class="headerlink" title="(3)生成package.json"></a>(3)生成package.json</h4><p>  npm init -y 自动生成一个package.json文件，后期使用npm 安装的包都会记录到这个文件中。<br>  npm install 自动安装package.json文件中记录的包</p>
<h3 id="7-全局函数"><a href="#7-全局函数" class="headerlink" title="7.全局函数"></a>7.全局函数</h3><p>parseInt/parseFloat/encodeURI/isNaN/isFinite/Eval</p>
<h4 id="1-一次性定时器"><a href="#1-一次性定时器" class="headerlink" title="(1)一次性定时器"></a>(1)一次性定时器</h4><p> 开启</p>
<p> var timer=setTimeout(回调函数, 间隔的时间);</p>
<p> 当间隔的时间到了，执行回调函数，单位是毫秒</p>
<p> 清除</p>
<p> clearTimeout(timer);</p>
<h4 id="2-周期性定时器"><a href="#2-周期性定时器" class="headerlink" title="(2)周期性定时器"></a>(2)周期性定时器</h4><p> 开启</p>
<p> var timer=setInterval(回调函数,间隔的时间);</p>
<p> 每隔一段时间，执行一次回调函数</p>
<p> 清除</p>
<p> clearInterval(timer)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//显示进度条加载</span></span><br><span class="line">&lt;!DOTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;进度条&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">#myProgress &#123;</span><br><span class="line">  width:<span class="number">100</span>%;</span><br><span class="line">  height:<span class="number">30</span>px;</span><br><span class="line">  position:relative;</span><br><span class="line">  background-color:#ddd;</span><br><span class="line">&#125;</span><br><span class="line">#myBar &#123;</span><br><span class="line">  background-color:#4CAF50;</span><br><span class="line">  width:<span class="number">10</span>px;</span><br><span class="line">  height:<span class="number">30</span>px;</span><br><span class="line">  position:absolute;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Js进度条&lt;/h1&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;myProgress&quot;</span>&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;myBar&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;button onclick=<span class="string">&quot;move()&quot;</span>&gt;点我&lt;/button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elem =<span class="built_in">document</span>.getElementById(<span class="string">&quot;myBar&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> width =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> id= <span class="built_in">setInterval</span>(frame,<span class="number">10</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">frame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(width == <span class="number">100</span>)&#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(id);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      width++;</span><br><span class="line">      elem.style.width= width +<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//didi三下后清除</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer=<span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;didi&#x27;</span>);</span><br><span class="line">  i++;<span class="comment">//当i=3的时候</span></span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-立即执行定时器"><a href="#3-立即执行定时器" class="headerlink" title="(3)立即执行定时器"></a>(3)立即执行定时器</h4><p>开启</p>
<p>var timer=setImmediate(回调函数)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//立即执行定时器</span></span><br><span class="line"><span class="keyword">var</span> timer=setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//回调函数会放入到队列中</span></span><br><span class="line">  <span class="comment">//当主线程执行完，才会执行队列的内容</span></span><br><span class="line">  <span class="comment">//console.log(1);</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;查询数据-1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;连接数据库&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>回调函数会放入到队列中</p>
<p>当主线程程序执行完，才会执行队列中的内容</p>
<p>清除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clearImmediate(timer);</span><br></pre></td></tr></table></figure>

<p>process.nextTick(回调函数)</p>
<p>在主程序的末尾执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;查询数据-2&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>主程序执行完后执行process.nextTick执行完之后再执行setImmediate</p>
<h3 id="8-querystring模块-查询字符串"><a href="#8-querystring模块-查询字符串" class="headerlink" title="8.querystring模块-查询字符串"></a>8.querystring模块-查询字符串</h3><p> 属于核心模块，nodejs官方提供的，可以直接引入，不需要创建</p>
<p> <a href="http://www.codeboy.com/detail.html?lid=5&amp;name=dell">www.codeboy.com/detail.html?lid=5&amp;name=dell</a></p>
<p> 浏览器向服务器发请求，传递数据的一种方式</p>
<p> parse()  将查询字符串格式化为对象</p>
<p> stringify()  将对象转换成查询字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入querystring模块</span></span><br><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">&#x27;querystring&#x27;</span>);</span><br><span class="line"><span class="comment">//查询字符串</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;lid=5&amp;name=dell&#x27;</span>;</span><br><span class="line"><span class="comment">//使用查询字符串模块，将查询字符串格式化为对象</span></span><br><span class="line"><span class="keyword">var</span> obj=querystring.parse(str);</span><br><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//&#123; lid: &#x27;5&#x27;, name: &#x27;dell&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将对象转换成查询字符串</span></span><br><span class="line"><span class="keyword">var</span> str2=querystring.stringify(obj);</span><br><span class="line"><span class="built_in">console</span>.log(str2);<span class="comment">//lid=5&amp;name=dell</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;e=utf-8&amp;tn=baidu&amp;wd=电脑&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj=querystring.parse(str);</span><br><span class="line"><span class="built_in">console</span>.log(obj.wd);<span class="comment">//电脑</span></span><br></pre></td></tr></table></figure>

<h3 id="9-url模块"><a href="#9-url模块" class="headerlink" title="9.url模块"></a>9.url模块</h3><p> parse()  将url格式化为对象</p>
<p>  protocol  协议</p>
<p>  hostname  服务器域名/IP地址</p>
<p>  port  端口号</p>
<p>  pathname  文件在服务器上的路径</p>
<p>  query  查询字符串</p>
<p> format()  将对象转成url</p>
<p>  query属性对应的是对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入url模块</span></span><br><span class="line"><span class="keyword">const</span> url=require(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;http://www.codeboy.com:80/product/detail.html?lid=5&amp;name=dell&#x27;</span>;</span><br><span class="line"><span class="comment">//将url格式化为对象</span></span><br><span class="line"><span class="keyword">var</span> obj=url.parse(str);</span><br><span class="line">console.log(obj);</span><br><span class="line"><span class="comment">/*Url &#123;</span></span><br><span class="line"><span class="comment">  protocol: &#x27;http:&#x27;,</span></span><br><span class="line"><span class="comment">  slashes: true,</span></span><br><span class="line"><span class="comment">  auth: null,</span></span><br><span class="line"><span class="comment">  host: &#x27;www.codeboy.com:80&#x27;,</span></span><br><span class="line"><span class="comment">  port: &#x27;80&#x27;,</span></span><br><span class="line"><span class="comment">  hostname: &#x27;www.codeboy.com&#x27;,</span></span><br><span class="line"><span class="comment">  hash: null,</span></span><br><span class="line"><span class="comment">  search: &#x27;?lid=5&amp;name=dell&#x27;,</span></span><br><span class="line"><span class="comment">  query: &#x27;lid=5&amp;name=dell&#x27;,</span></span><br><span class="line"><span class="comment">  pathname: &#x27;/product/detail.html&#x27;,</span></span><br><span class="line"><span class="comment">  path: &#x27;/product/detail.html?lid=5&amp;name=dell&#x27;,</span></span><br><span class="line"><span class="comment">  href: &#x27;http://www.codeboy.com:80/product/detail.html?lid=5&amp;name=dell&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  protocol:<span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">  hostname:<span class="string">&#x27;172.168.0.225&#x27;</span>,</span><br><span class="line">  port:<span class="number">80</span>,</span><br><span class="line">  pathname:<span class="string">&#x27;/product/detail.html&#x27;</span>,</span><br><span class="line">  query:&#123;</span><br><span class="line">    uname:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    upwd:<span class="string">&#x27;1233&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str=url.format(obj);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">//http://172.168.0.225:80/product/detail.html?uname=root&amp;upwd=1233</span></span><br></pre></td></tr></table></figure>

<h3 id="10-fs模块—文件系统模块"><a href="#10-fs模块—文件系统模块" class="headerlink" title="10.fs模块—文件系统模块"></a>10.fs模块—文件系统模块</h3><p> 用于文件的操作，目录的创建、删除、读取；文件的创建、读取、写入、删除..</p>
<h4 id="1-查看文件的状态"><a href="#1-查看文件的状态" class="headerlink" title="(1)查看文件的状态"></a>(1)查看文件的状态</h4><p>fs.stat(path, callback)</p>
<p>path  要查看的文件的路径</p>
<p>callback  回调函数，用于获取文件的状态</p>
<p>err 如果查看失败的错误信息</p>
<p>stats  文件的状态信息</p>
<p>isDirectory()  是否为目录</p>
<p>isFile()  是否为文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入文件系统模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//查看文件的状态</span></span><br><span class="line"><span class="comment">//参数1：要查看的文件路径</span></span><br><span class="line"><span class="comment">//参数2：回调函数，用于获取结果</span></span><br><span class="line">fs.stat(<span class="string">&#x27;05&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//err: 如果查看失败的错误消息</span></span><br><span class="line">  <span class="comment">//throw抛出错误,阻止往后执行</span></span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="comment">//stats: 文件的状态信息</span></span><br><span class="line">  <span class="built_in">console</span>.log(stats);</span><br><span class="line">  <span class="comment">//是否为目录</span></span><br><span class="line">  <span class="built_in">console</span>.log( stats.isDirectory() );</span><br><span class="line">  <span class="comment">//是否为文件</span></span><br><span class="line">  <span class="built_in">console</span>.log( stats.isFile() );</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h4 id="2-创建目录"><a href="#2-创建目录" class="headerlink" title="(2)创建目录"></a>(2)创建目录</h4><p>  fs.mkdir(path,callback) / mkdirSync(path)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建目录</span></span><br><span class="line">fs.mkdir(<span class="string">&#x27;mydir2&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="comment">//其它的后续操作</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;目录创建成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fs.mkdirSync(<span class="string">&#x27;mydir3&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-移除目录"><a href="#3-移除目录" class="headerlink" title="(3)移除目录"></a>(3)移除目录</h4><p>  fs.rmdir(path,callback) / rmdirSync(path)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移除目录</span></span><br><span class="line">fs.rmdir(<span class="string">&#x27;mydir3&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;移除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.rmdirSync(<span class="string">&#x27;mydir2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-读取目录"><a href="#4-读取目录" class="headerlink" title="(4)读取目录"></a>(4)读取目录</h4><p>  fs.readdir(path,callback) / readdirSync(path)</p>
<p>   callback </p>
<p>​    err 可能产生的错误信息</p>
<p>​    files  读取的结果，格式为数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取目录中的内容</span></span><br><span class="line">fs.readdir(<span class="string">&#x27;01_homework&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="comment">//files是读取的结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(files);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> files=fs.readdirSync(<span class="string">&#x27;01_homework&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(files);</span><br></pre></td></tr></table></figure>

<h4 id="5-清空写入"><a href="#5-清空写入" class="headerlink" title="(5)清空写入"></a>(5)清空写入</h4><p> fs.writeFile(path, data, callback) / writeFileSync()</p>
<p>  path 要写入的文件的路径</p>
<p>  data 要写入的数据</p>
<p>  callback 回调函数</p>
<p> 如果文件不存在会创建文件，如果文件已经存在，会清空文件中的内容，然后写入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建(写入)文件</span></span><br><span class="line"><span class="comment">//清空写入</span></span><br><span class="line">fs.writeFile(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;tedu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;写入文件&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="6-追加写入"><a href="#6-追加写入" class="headerlink" title="(6)追加写入"></a>(6)追加写入</h4><p> fs.appendFile(path,data,callback)/appendFileSync()</p>
<p> 如果文件存在，在文件的末尾写入数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//追加写入</span></span><br><span class="line">fs.appendFile(<span class="string">&#x27;2.txt&#x27;</span>,<span class="string">&#x27;tedu\n&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;写入文件&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;king&#x27;</span>];</span><br><span class="line"><span class="comment">//遍历数组，获取每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">  <span class="comment">//arr[i]</span></span><br><span class="line">  <span class="comment">//把每个元素写入到文件中</span></span><br><span class="line">  fs.appendFileSync(<span class="string">&#x27;data.txt&#x27;</span>,arr[i]+<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7-读取文件"><a href="#7-读取文件" class="headerlink" title="(7)读取文件"></a>(7)读取文件</h4><p> fs.readFile(path, callback)/readFileSync()</p>
<p>  callback </p>
<p>   err 可能产生的错误信息</p>
<p>   data 读取的文件中的数据，格式为buffer</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;1.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="8-删除文件"><a href="#8-删除文件" class="headerlink" title="(8)删除文件"></a>(8)删除文件</h4><p>  fs.unlink(path, callback) / unlinkSync()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除文件</span></span><br><span class="line">fs.unlink(<span class="string">&#x27;1.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="9-判断文件-目录-是否存在"><a href="#9-判断文件-目录-是否存在" class="headerlink" title="(9)判断文件(目录)是否存在"></a>(9)判断文件(目录)是否存在</h4><p>  fs.existsSync(path) </p>
<p>  存在-&gt;true  不存在-&gt;false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="keyword">var</span> res=fs.existsSync(<span class="string">&#x27;mydir2&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<h4 id="10-同步和异步"><a href="#10-同步和异步" class="headerlink" title="(10)同步和异步"></a>(10)同步和异步</h4><p> 同步：方法调用后，必须等待方法调用结束，才能继续后边的任务；通过返回值获取结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="keyword">var</span> stats=fs.statSync(<span class="string">&#x27;01_homework&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(stats);</span><br></pre></td></tr></table></figure>

<p> 异步：方法调用后，无需等待结束，直接去执行后续的代码，整个过程，不会阻碍后边的任务；通过回调函数获取结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//异步方法</span></span><br><span class="line">fs.stat(<span class="string">&#x27;01_homework &#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stats</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)<span class="keyword">throw</span> err;</span><br><span class="line">  <span class="built_in">console</span>.log(stats);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//把查看的文件状态保存到了变量中</span></span><br><span class="line"><span class="comment">//使用方法的返回值获取结果</span></span><br></pre></td></tr></table></figure>

<h3 id="11-http协议"><a href="#11-http协议" class="headerlink" title="11.http协议"></a>11.http协议</h3><p>是浏览器和web服务器之间的通信协议</p>
<p>(1)通用头信息</p>
<p>Request URL: 请求的URL，对应浏览器地址栏的内容，要向服务器获取哪些内容</p>
<p>  Request Method: 请求的方法，GET/POST…，获取内容的方式</p>
<p>  Status Code: 响应的状态码,可以查看到响应的结果</p>
<p>   1**: 正在请求，没有结束</p>
<p>   2**: 成功的响应</p>
<p>   3**: 响应的重定向，跳转到另一个URL;通常结合响应头信息中Location一起使用</p>
<p>   4**: 客户端错误</p>
<p>   5**: 服务器错误</p>
<p>  Remote Address: 请求的服务器的IP地址和端口号</p>
]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础（FreeCodeCamp）</title>
    <url>/2020/09/14/CSS%E5%9F%BA%E7%A1%80%EF%BC%88FreeCodeCamp%EF%BC%89/</url>
    <content><![CDATA[<p>2020.9.14记</p>
<a id="more"></a>

<p>1、更改文本的颜色</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//改变h2元素为蓝色</span><br><span class="line">&lt;h2 style=&quot;color:blue;&quot;&gt;catphotoapp&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>2、使用元素选择器来设置元素的样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//创建一个style声明区域，在该区域内，创建一个元素选择器</span><br><span class="line">//使所有h2元素变成红色</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">h2</span> &#123;<span class="attribute">color</span>: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>3、使用class选择器设置单个元素的样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//在&lt;style&gt;样式声明区域里，创建一个名为blue-text的class选择器</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.blue-text</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>4、使用class选择器设置多个元素的样式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//将red-text class选择器应用在第一个p元素上</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.red-text</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;p class=&quot;red-text&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>5、更改元素的字体大小</p>
<p>字体大小由font-size属性控制</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//在包含red-text class选择器的&lt;style&gt;声明区域的里面创建一个p元素样式规则，并设置font-size为16px</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.red-text</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-szie</span>:<span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>6、设置元素的字体家族</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//如果你想设置h2元素的字体为sans-serif，你可以使用以下的CSS规则</span><br><span class="line"><span class="selector-tag">h2</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>:sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、引入谷歌字体</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//将链接放到style标签之前</span><br><span class="line">&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>8、字体如何优雅降级</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//Helvetica不可用时，降级使用sans-serif字体</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">font-family</span>:Helvetica，sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9、调整图片的大小</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//创建一个larger-image的CSS class来控制HTML元素的宽度为500px</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.larger-image</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>10、在元素周围添加边框</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.thin-red-border</span>&#123;</span><br><span class="line"><span class="attribute">border-color</span>:red;</span><br><span class="line"><span class="attribute">border-width</span>:<span class="number">5px</span>;</span><br><span class="line"><span class="attribute">border-style</span>:solid;</span><br><span class="line"><span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在一个元素上可以应用多个class，通过使用空格来分隔</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;img class=&quot;class1 class2&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>11、设置元素的id</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">//设置h2元素的id为cat-photo-app</span><br><span class="line">&lt;h2 id=&quot;cat-photo-app&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>12、使用id属性来设定元素的样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在style标签中写入</span></span><br><span class="line">#cat-photo-element &#123;</span><br><span class="line">  background-color: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意在style标签里，声明 class 的时候必须在名字前插入.符号。同样，在声明 id 的时候，也必须在名字前插入#符号</span></span><br></pre></td></tr></table></figure>

<p>13、CSS基础：调整元素的内外边距</p>
<p>每个 HTML 元素周围的矩形空间由三个重要的属性来控制：padding（内边距），margin（外边距）和border（边框）</p>
<p>padding控制着元素内容与border之间的空隙大小。</p>
<p>margin（外边距）控制元素的边框与其他元素之间的距离。</p>
<p>如果你设置元素margin为负值，元素会变得更大。</p>
<p>CSS 允许你使用<code>padding-top</code>，<code>padding-right</code>， <code>padding-bottom</code>和<code>padding-left</code>属性来设置四个不同方向的<code>padding</code>值。</p>
<p>CSS 允许你使用<code>margin-top</code>，<code>margin-right</code>，<code>margin-bottom</code>和<code>margin-left</code>属性来设置四个不同方向的<code>margin</code>值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">padding: <span class="number">10</span>px <span class="number">20</span>px <span class="number">10</span>px <span class="number">20</span>px;</span><br></pre></td></tr></table></figure>

<p>这四个值按顺时针排序：上，右，下，左，并且设置的效果等同于特定声明每一个方向的<code>padding</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">margin: <span class="number">10</span>px <span class="number">20</span>px <span class="number">10</span>px <span class="number">20</span>px;</span><br></pre></td></tr></table></figure>

<p>这四个值按顺时针排序：上，右，下，左，并且设置的效果等同于特定声明每一个方向的<code>margin</code>。</p>
<p>14、CSS基础：使用属性选择器来设置元素的样式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[type=<span class="string">&#x27;radio&#x27;</span>] &#123;</span><br><span class="line">  margin: <span class="number">20</span>px <span class="number">0</span>px <span class="number">20</span>px <span class="number">0</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>15、CSS基础：Class选择器的优先级高于继承样式</p>
<p>在<code>&lt;style&gt;</code>标签里面声明的<code>class</code>顺序十分重要。第二个声明始终优于第一个声明。因为<code>.blue-text</code>在<code>.pink-text</code>的后面声明，所以<code>.blue-text</code>会覆盖<code>.pink-text</code>的样式。</p>
<p>16、CSS基础：ID选择器优先级高于Class选择器</p>
<p>注意：无论在class 的上面或者下面声明，id 选择器的优先级总是会高于 class 选择器,id 选择器无论在<code>style</code>标签哪里声明，都会覆盖 class 声明的样式，</p>
<p>17、CSS基础：内联样式的优先级高于ID选择器</p>
<p>行内样式会覆盖<code>style</code>标签里面所有的 CSS 声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=<span class="string">&quot;color:wihte&gt;&lt;/h1</span></span><br></pre></td></tr></table></figure>

<p>18、CSS基础：Important的优先级最高</p>
<p>在很多时候，你使用 CSS 库，有时候它们声明的样式会意外的覆盖你的 CSS 样式。当你需要保证你的 CSS 样式不受影响，你可以使用<code>!important</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">color: red !important;</span><br></pre></td></tr></table></figure>

<p>19、CSS基础：使用十六进制编码获得指定颜色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  color: #000000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>20、CSS基础：使用十六进制编码混合颜色</p>
<p>21、CSS基础：使用RGB值为元素上色</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background-color: rgb(<span class="number">255</span>, <span class="number">165</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>22、CSS基础：创建一个自定义的CSS变量</p>
<p>在penguin中创建一个–penguin-skin：gray</p>
<p>23、CSS基础：使用一个自定义的CSS变量</p>
<p>创建变量后，CSS 属性可以通过引用变量名来使用它的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">background: <span class="keyword">var</span>(--penguin-skin);</span><br></pre></td></tr></table></figure>

<p>24、CSS基础：给CSS变量附加回退值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">background: <span class="keyword">var</span>(--penguin-skin, black);</span><br></pre></td></tr></table></figure>

<p>25、CSS基础：层级CSS变量</p>
<p>就像<code>html</code>是<code>body</code>的容器一样，你也可以认为<code>:root</code>元素是你整个 HTML 文档的容器。在<code>:root</code>创建的变量，在整个网页里面都能生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">:root&#123;</span><br><span class="line">--penguin-skin:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>26、CSS基础：更改特定区域的变量</p>
<p>当你在<code>:root</code>里创建变量时，这些变量的作用域是整个页面。</p>
<p>如果在元素里创建相同的变量，会重写<code>:root</code>变量设置的值</p>
<p>27、CSS基础：使用媒体查询更改变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@media (max-width: <span class="number">350</span>px) &#123;</span><br><span class="line">    :root &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/* add code below */</span></span><br><span class="line">      --penguin-size:<span class="number">20</span>px;</span><br><span class="line">      --penguin-skin:black;</span><br><span class="line">      <span class="comment">/* add code above */</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>28、应用视觉设计：使用text-align属性创建视觉平衡</p>
<p>CSS 里面的<code>text-align</code>属性可以控制文本的对齐方式。</p>
<p><code>text-align: justify;</code>可以让除最后一行之外的文字两端对齐，即每行的左右两端都紧贴行的边缘。</p>
<p><code>text-align: center;</code>可以让文本居中对齐。</p>
<p><code>text-align: right;</code>可以让文本右对齐。</p>
<p><code>text-align: left;</code>是<code>text-align</code>的默认值，它可以让文本左对齐。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//居中对齐h4标签</span></span><br><span class="line">  h4 &#123;</span><br><span class="line">    text-align:center;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>29、应用视觉设计：使用width属性调整元素的宽度</p>
<p>你可以使用 CSS 里面的<code>width</code>属性来指定元素的宽度。属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。下面这个例子把图片的宽度设置为 220px</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">width:<span class="number">220</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>30、应用视觉设计：使用height属性调整元素的高度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img &#123;</span><br><span class="line">  height: <span class="number">20</span>px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>31、应用视觉设计：使用strong标签加粗文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Google 由在&lt;strong&gt;斯坦福大学&lt;<span class="regexp">/strong&gt;攻读理工博士的拉里·佩奇和谢尔盖·布林共同创建。&lt;/</span>p&gt;</span><br></pre></td></tr></table></figure>

<p>32、应用视觉设计：使用u标签给文本添加下划线</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Google 由在&lt;strong&gt;斯坦福大学&lt;<span class="regexp">/strong&gt;攻读&lt;u&gt;理工博士&lt;/u</span>&gt;的拉里·佩奇和谢尔盖·布林共同创建。&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>33、应用视觉设计：使用em标签强调文本</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;em&gt;&lt;/em&gt;</span><br></pre></td></tr></table></figure>

<p>34、应用视觉设计：使用s标签给文本添加删除线</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;s&gt;&lt;/s&gt;</span><br></pre></td></tr></table></figure>

<p>35、应用视觉设计：使用 hr 标签创建水平线</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;</span><br></pre></td></tr></table></figure>

<p>hr是自关闭标签</p>
<p>36、应用视觉设计：调整文本的背景色</p>
<p>rgba 代表：<br> r = red 红色<br> g = green 绿色<br> b = blue 蓝色<br> a = alpha 透明度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h4</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="built_in">rgba</span>(<span class="number">45</span>,<span class="number">45</span>,<span class="number">45</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>37、应用视觉设计：调整标题与段落的大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//把h4标签的font-size改成 27 像素</span><br><span class="line">  <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">0.1</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">27px</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>38、应用视觉设计：给卡片元素添加 box-shadow</p>
<p><code>box-shadow</code>属性的每个阴影依次由下面这些值描述：</p>
<ul>
<li><code>offset-x</code>阴影的水平偏移量；</li>
<li><code>offset-y</code>阴影的垂直偏移量;</li>
<li><code>blur-radius</code>模糊距离；</li>
<li><code>spread-radius</code>阴影尺寸；</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#thumbnail</span>&#123;</span><br><span class="line"> <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.19</span>), <span class="number">0</span> <span class="number">6px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.23</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>39、应用视觉设计：降低元素的 opactiy</p>
<p>CSS 里的<code>opacity</code>属性用来设置元素的透明度。</p>
<p>值 1 代表完全不透明。<br>值 0.5 代表半透明。<br>值 0 代表完全透明。</p>
<p>透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.links</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">opacity</span>:<span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>40、应用视觉设计：使用 text-transform 属性给文本添加大写效果</p>
<p>CSS 里面的<code>text-transform</code>属性来改变英文中字母的大小写。它通常用来统一页面里英文的显示，且无需直接改变 HTML 元素中的文本。</p>
<table>
<thead>
<tr>
<th><code>owercase</code></th>
<th>“transform me”</th>
</tr>
</thead>
<tbody><tr>
<td><code>uppercase</code></td>
<td>“TRANSFORM ME”</td>
</tr>
<tr>
<td><code>capitalize</code></td>
<td>“Transform Me”</td>
</tr>
<tr>
<td><code>initial</code></td>
<td>使用默认值</td>
</tr>
<tr>
<td><code>inherit</code></td>
<td>使用父元素的<code>text-transform</code>值。</td>
</tr>
<tr>
<td><code>none</code></td>
<td>**Default:**不改变文字</td>
</tr>
</tbody></table>
<p>41、应用视觉设计：设置段落的 line-height</p>
<p>CSS 提供<code>line-height</code>属性来设置行间的距离。行高，顾名思义，用来设置每行文字所占据的垂直空间。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>42、应用视觉设计：调整锚点的悬停状态</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>43、应用视觉设计：更改元素的相对位置</p>
<p>元素的 position 设置为<code>relative</code>时，它允许你通过 CSS 指定该元素在当前普通流页面下的相对偏移量。 CSS 里控制各个方向偏移量的对应的属性是<code>left</code>、<code>right</code>、<code>top</code>和<code>bottom</code>。它们代表着从原来的位置向对应的方向偏移指定的像素、百分比或者 ems。下面的例子展示了段落向上偏移 10 像素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>44、应用视觉设计：绝对定位的参照物是元素的父元素</p>
<p><code>absolute</code>定位比较特殊的一点是元素的定位参照于最近的已定位祖先元素。如果它的父元素没有添加定位规则（默认是<code>position:relative;</code>）,浏览器会继续寻找直到默认的 body 标签。</p>
<p>45、应用视觉设计：固定定位的参照物是浏览器的窗口</p>
<p>接下来要介绍的是<code>fixed</code>定位，它是一种特殊的绝对（absolute）定位，区别是其包含块是浏览器窗口。和绝对定位类似，<code>fixed</code>定位使用 top、bottom、left 和 right 属性来调整元素的位置，并且会将元素从当前的文档流里面移除，其它元素会忽略它的存在。</p>
<p><code>fixed</code>定位和<code>absolute</code>定位的最明显的区别是<code>fixed</code>定位元素不会随着屏幕滚动而移动。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#navbar</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#767676</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>46、应用视觉设计：使用 float 属性将元素左浮动或右浮动</p>
<p>接下来要介绍的定位机制并不是<code>position</code>属性的选项，它通过元素的<code>float</code>属性来设置。浮动元素不在文档流中，它向左或向右浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。通常需要用<code>width</code>属性来指定浮动元素占据的水平空间。设置<code>#left</code>元素的<code>float</code>为<code>left</code>，设置<code>#right</code>元素的<code>float</code>为<code>right</code>。使这两个元素按两列布局，<code>section</code>和<code>aside</code>左右排列</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>47、应用视觉设计：使用 z-index 属性更改重叠元素的位置</p>
<p>当一些元素重叠时，在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。你可以使用<code>z-index</code>属性指定元素的堆叠次序。<code>z-index</code>的取值是整数，数值大的元素优先于数值小的元素显示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">2</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.second</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>48、应用视觉设计：使用 margin 属性将元素水平居中</p>
<p>在应用设计中经常需要把一个块级元素水平居中显示。一种常见的实现方式是把块级元素的<code>margin</code>值设置为<code>auto</code>。</p>
<p>同样的，这个方法也对图片奏效。图片默认是内联元素，但是可以通过设置其<code>display</code>属性为<code>block</code>来把它变成块级元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>49、应用视觉设计：调整颜色的色相</p>
<p>SL 色彩空间模型是一种将 RGB 色彩模型中的点放在圆柱坐标系中的表示法，描述了色相（hue）、饱和度（saturation）、亮度（lightness）。CSS3 引入了对应的<code>hsl()</code>属性做为对应的颜色描述方式。</p>
<p>把 class 为<code>green</code>、<code>cyan</code>和<code>blue``div</code>的<code>background-color</code>使用<code>hsl()</code>表示法描述相应的颜色。颜色都为满饱和度，亮度中等。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.green</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">120</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.cyan</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">180</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.blue</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">240</span>,<span class="number">100%</span>,<span class="number">50%</span>);</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>50、应用视觉设计：调整颜色的色调</p>
<p><code>hsl()</code>使 CSS 更改色调更方便。给纯色添加白色可以创造更浅的色调，添加黑色可以创造更深的色调。另外，还可以通过给纯色添加灰色来同时改变颜色的深浅和明暗。回忆下<code>hsl()</code>里面的‘s’和‘l’分辨代表饱和度和亮度。饱和度代表灰色的占比，亮度代表白色和黑色的占比。这在当你有了一个基色调却需要微调时非常有用。</p>
<p>改变<code>nav</code>元素的<code>background-color</code>，保留基色蓝绿色，调整它的色调和明暗使它具有 80% 的饱和度以及 25% 的亮度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:<span class="built_in">hsl</span>(<span class="number">180</span>,<span class="number">80%</span>,<span class="number">25%</span>);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>51、应用视觉设计：创建一个 CSS 线性渐变</p>
<p>HTML 元素的背景色并不局限于单色。CSS 还提供了颜色过渡，也就是渐变。可以通过<code>background</code>里面的<code>linear-gradient()</code>来实现线性渐变，下面是它的语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">background: linear-gradient(gradient_direction, 颜色 1, 颜色 2, 颜色 3, ...);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">linear-gradient</span>(<span class="number">35deg</span>,    #CCFFFF,#FFCCCC);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>52、应用视觉设计：使用 CSS 线性渐变创建条纹元素</p>
<p>在代码编辑器的例子里，渐变开始于 0 像素位置的<code>yellow</code>，然后过渡到距离开始位置 40 像素的<code>blue</code>。由于下一个起止渐变颜色值的起止位置也是 40 像素，所以颜色直接渐变成第三个颜色值<code>green</code>，然后过渡到距离开始位置 80 像素的<code>red</code></p>
<p>使用<code>repeating-linear-gradient()</code>函数创建一个渐变角度为 <code>45deg</code>的条纹，然后设置第一对渐变颜色为<code>yellow</code>, 第二对渐变颜色为<code>black</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123; </span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:  <span class="number">50</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(</span><br><span class="line">      <span class="number">90deg</span>,</span><br><span class="line">      yellow <span class="number">0px</span>,</span><br><span class="line">      yellow <span class="number">40px</span>,</span><br><span class="line">      black <span class="number">40px</span>,</span><br><span class="line">      black <span class="number">80px</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>53、应用视觉设计：通过添加细微图案作为背景图像来创建纹理</p>
<p><code>background</code>属性支持使用<code>url()</code>函数通过链接的方式引入一个指定纹理或样式的图片。图片链接地址在括号内，一般会用引号包起来。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="built_in">url</span>(https://i.imgur.com/MJAkxbh.png);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>54、应用视觉设计：使用CSS Transform scale 属性在悬停时缩放元素</p>
<p><code>transform</code>属性有很多函数，可以对元素进行调整大小、移动、旋转、翻转等操作。当使用伪类描述元素的指定状态如<code>:hover</code>时，<code>transform</code>属性可以方便的给元素添加交互</p>
<p>给<code>div</code>伪类<code>hover</code>添加<code>transform</code>属性，使其当鼠标悬停时大小缩放到原始大小的 1.1 倍。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:  <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="number">53deg</span>,</span><br><span class="line">      #ccfffc,</span><br><span class="line">      #ffcccf</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>55、应用视觉设计：使用 CSS Transform skex 属性沿X轴倾斜元素</p>
<p>使用<code>transform</code>属性沿 X 轴翻转 id 为<code>bottom</code>的元素 24 度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#bottom</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">skewX</span>(<span class="number">24deg</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>transform</code>属性沿 Y 轴翻转 id 为<code>top</code>的元素 -10 度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#top</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">skewY</span>(-<span class="number">10deg</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>56、应用视觉设计：使用 CSS 创建一个图形</p>
<p>术语表：blur-radius =&gt; 模糊半径，spread-radius =&gt; 辐射半径，transparent =&gt; 透明的，border-radius =&gt; 圆角边框。</p>
<p>通过使用选择器选择不同的元素并改变其属性，你可以创造一些有趣的形状。比如新月。你可以使用<code>box-shadow</code>属性来设置元素的阴影，<code>border-radius</code>属性控制元素的圆角边框</p>
<p>为了创建一个圆形的对象，<code>border-radius</code>应该被设置成 50%。</p>
<p>把编辑器里的正方形元素变成新月形状。首先，把<code>background-color</code>改为 transparent，接着把<code>border-radius</code>属性设置成 50%，以创建一个圆形。最后，更改<code>box-shadow</code>属性，使其<code>offset-x</code>为 25px，<code>offset-y</code>为 10px，<code>blur-radius</code>为 0，<code>spread-radius</code>为 0，<code>color</code>为 blue。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.center</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">25px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="number">0px</span> blue; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>57、应用视觉设计：使用 CSS 和 HTML 创建更复杂的形状</p>
<p>世界上最流行的形状非心形莫属了，在本关里你将用纯 CSS 创建一个心形。但是首先你需要了解<code>:before</code>和<code>:after</code>伪类</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.heart</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">rotate</span>(-<span class="number">45deg</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heart</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">&quot;&quot;</span> ;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class = &quot;heart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>58、应用视觉设计：了解 CSS 的关键帧和动画是如何工作的</p>
<p>如果要给元素添加动画，你需要了解<code>animation</code>属性以及<code>@keyframes</code>规则。<code>animation</code>属性控制动画的外观，<code>@keyframes</code>规则控制动画中各阶段的变化。总共有 8 个<code>animation</code>属性。为了便于理解，本关暂时只涉及到两个最常用的属性。</p>
<p><code>animation-name</code>设置动画的名称， 也就是要绑定的选择器的<code>@keyframes</code>的名称。</p>
<p><code>animation-duration</code>设置动画所花费的时间。</p>
<p>给 id 为<code>rect</code>的元素添加动画，设置其<code>animation-name</code>为 rainbow，设置其<code>animation-duration</code>为 4 秒。然后声明<code>@keyframes</code>规则，设置动画开始时（0%）的<code>background-color</code>为蓝色，动画中间时（50%）为绿色，动画结束时（100%）为为黄色。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#rect</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>:rainbow;</span><br><span class="line">    <span class="attribute">animation-duration</span>:<span class="number">4s</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> rainbow&#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">    50%&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:green;</span><br><span class="line">    &#125;</span><br><span class="line">    100%&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:yellow;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;rect&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>59、应用视觉设计：使用CSS动画更改按钮的悬停状态</p>
<p>使用<code>@keyframes</code>来改变<code>button</code>元素的<code>background-color</code>，使其当悬停时变成<code>#4791d0</code>。<code>@keyframes</code>规则应该只有一个<code>100%</code>条目。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0F5897</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: background-color;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">500ms</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> background-color&#123;</span><br><span class="line">    100%&#123;</span><br><span class="line">      <span class="attribute">background-color</span>:<span class="number">#4791d0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br><span class="line">  </span><br><span class="line">&lt;button&gt;注册&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>60、应用视觉设计：修改动画的填充模式</p>
<p>这可以通过把<code>animation-fill-mode</code>设置成<code>forwards</code>来实现。<code>animation-fill-mode</code>指定了在动画结束时元素的样式。你可以向这样设置它：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">animation-fill-mode</span>: <span class="selector-tag">forwards</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#0F5897</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">8px</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation-name</span>: background-color;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">500ms</span>;</span><br><span class="line">    <span class="comment">/* add your code below this line */</span></span><br><span class="line">    <span class="attribute">animation-fill-mode</span>:forwards;</span><br><span class="line">    <span class="comment">/* add your code above this line */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">@keyframes</span> background-color &#123;</span><br><span class="line">    100% &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#4791d0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;button&gt;注册&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<p>61、应用视觉设计：使用 CSS 动画创建运动</p>
<p>当元素的<code>position</code>被指定，如<code>fixed</code>或者<code>relative</code>时，CSS 偏移属性<code>right</code>、<code>left</code>、<code>top</code>和<code>bottom</code>可以用在动画规则里创建动作</p>
<p>让<code>div</code>水平运动。使用<code>left</code>偏移属性，添加<code>@keyframes</code>规则，让 rainbow 在<code>0%</code>的 0 像素开始，在<code>50%</code>时移动到 25 像素，在<code>100%</code>时时移动到 -25 像素。不要替换编辑器里的<code>top</code>属性，动画应该同时向水平和竖直方向运动。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">    <span class="attribute">background</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#rect</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: rainbow;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0px</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: green;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">25px</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">25px</span>;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;rect&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>62、应用视觉设计：通过从左到右淡化元素来创建视觉方向</p>
<p>在展示的动画里，具有渐变背景的圆形元素在 50% 标记的<code>@keyframes</code>规则处向右移动。使用 id 选择器选择 id 为<code>ball</code>的元素，在<code>50%</code>里添加<code>opacity</code>属性并赋值 0.1，使其在向右移动时渐隐。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#ball</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">20%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="number">35deg</span>,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    <span class="attribute">animation-name</span>: fade;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">3s</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> fade &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">60%</span>;</span><br><span class="line">      <span class="attribute">opacity</span>:<span class="number">0.1</span>;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;ball&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>63、应用视觉设计：使用无限的动画计数制作永不停止的动画</p>
<p>之前的关卡里介绍了一些动画属性以及<code>@keyframes</code>规则的用法。还有一个常用的动画属性是<code>animation-iteration-count</code>，这个属性允许你控制动画循环的次数。下面是一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">animation-iteration-count: 3;</span><br></pre></td></tr></table></figure>

<p>在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 infinite。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#ball</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">      <span class="number">35deg</span>,</span><br><span class="line">      #ccffff,</span><br><span class="line">      #ffcccc</span><br><span class="line">    );</span><br><span class="line">    <span class="attribute">animation-name</span>: bounce;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> bounce&#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">249px</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">130px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;ball&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>64、应用视觉设计：使用无限的动画计数制作 CSS 心跳</p>
<p>心跳动画的每一秒包含两个部分。<code>heart</code>元素（包括<code>:before</code>和<code>:after</code>）使用<code>transform</code>属性改变其大小，背景<code>div</code>使用<code>background</code>属性改变其颜色。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-class">.back</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">animation-name</span>: backdiv;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>; </span><br><span class="line">    <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.heart</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">animation-name</span>: beat;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">animation-iteration-count</span>:infinite;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"> <span class="selector-class">.heart</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.heart</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> backdiv &#123;</span><br><span class="line">    50% &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#ffe6f2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">@keyframes</span> beat &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>) <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    50% &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.6</span>) <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;back&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;heart&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS中this的指向</title>
    <url>/2020/09/10/JS%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<p>2020.9.10记</p>
<a id="more"></a>

<p>情况1：如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是window，这里需要说明的是在js的严格版中this指向的不是window</p>
<p>情况2：如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。</p>
<p>情况3：如果一个函数中有this，<strong>这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象</strong></p>
<p>情况4：new操作符会改变函数this的指向问题</p>
<p>为什么this会指向a？首先new关键字会创建一个空的对象，然后会自动调用一个函数apply方法，将this指向这个空对象，这样的话函数内部的this就会被这个空的对象替代</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.num = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> fn();</span><br><span class="line"><span class="built_in">console</span>.log(a.num); <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/pssp/p/5216085.html">彻底理解this的用法</a></p>
]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts数组</title>
    <url>/2020/09/05/JavaScripts%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>2020.9.5记</p>
<a id="more"></a>

<h3 id="1-检测对象中是否含有某个属性"><a href="#1-检测对象中是否含有某个属性" class="headerlink" title="1.检测对象中是否含有某个属性"></a>1.检测对象中是否含有某个属性</h3><p> 对象.属性名===undefined  true-&gt;不存在 false-&gt;存在</p>
<p> 对象.hasOwnProperty(‘属性名’); true-&gt;存在 false-&gt;不存在</p>
<p> ‘属性名’ in 对象  true-&gt;存在  false-&gt;不存在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  name:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">  sex:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  age:<span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//访问不存在的属性返回 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log( person.phone );<span class="comment">//undefined</span></span><br><span class="line"><span class="comment">//比较一个属性的值是否为undefined</span></span><br><span class="line"><span class="built_in">console</span>.log( person.age===<span class="literal">undefined</span> );<span class="comment">//false</span></span><br><span class="line"><span class="comment">//查看是否含有某个属性</span></span><br><span class="line"><span class="built_in">console</span>.log( person.hasOwnProperty(<span class="string">&#x27;email&#x27;</span>) );<span class="comment">//false</span></span><br><span class="line"><span class="comment">//查看某个属性是否存在于对象中</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;sex&#x27;</span> <span class="keyword">in</span> person );<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book=&#123;</span><br><span class="line">  id:<span class="number">1002</span>,</span><br><span class="line">  title:<span class="string">&#x27;javascript高级程序设计&#x27;</span>,</span><br><span class="line">  price:<span class="number">79</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把book变量中存储的数据赋给book2变量</span></span><br><span class="line"><span class="comment">//把book存储的地址赋给了book2</span></span><br><span class="line"><span class="comment">//现在book和book2指向同一个对象</span></span><br><span class="line"><span class="keyword">var</span> book2=book;</span><br><span class="line"><span class="comment">//使用不同的变量去修改同一个对象</span></span><br><span class="line"><span class="comment">//修改book中属性</span></span><br><span class="line">book.price=<span class="number">86</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book2);<span class="comment">//&#123; id: 1002, title: &#x27;javascript高级程序设计&#x27;, price: 86 &#125;</span></span><br><span class="line"><span class="comment">//修改book2的属性</span></span><br><span class="line">book2.title=<span class="string">&#x27;JavaScript权威指南&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(book);<span class="comment">//&#123; id: 1002, title: &#x27;JavaScript权威指南&#x27;, price: 86 &#125;</span></span><br></pre></td></tr></table></figure>

<p>引用类型的储存是储存地址，原始类型储存直接储存数值</p>
<p><img src="/images/js/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AD%98%E5%82%A8.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=arr;<span class="comment">//把arr中的地址赋给了arr2</span></span><br><span class="line">arr.push(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="comment">//console.log(arr2);</span></span><br><span class="line"><span class="comment">//赋值为null，不再指向任何一个堆内存数据,释放内存空间</span></span><br><span class="line">arr=<span class="literal">null</span>; </span><br><span class="line">arr2=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fn提升到最前边,函数提升</span></span><br><span class="line"><span class="comment">//var fn;</span></span><br><span class="line"><span class="comment">//function fn()&#123;&#125;//把一个函数赋给fn</span></span><br><span class="line"><span class="built_in">console</span>.log(fn);<span class="comment">//[Function: fn]</span></span><br><span class="line"><span class="keyword">var</span> fn=<span class="number">1</span>;<span class="comment">//再次覆盖了fn中的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>数组</p>
<p> 数组是由多个元素组成的集合，每个元素就是一个数据</p>
<h3 id="2-创建数组"><a href="#2-创建数组" class="headerlink" title="2.创建数组"></a>2.创建数组</h3><h4 id="1-数组字面量"><a href="#1-数组字面量" class="headerlink" title="(1)数组字面量"></a>(1)数组字面量</h4><p> [元素1,元素2…]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> laptop=[<span class="string">&#x27;小米Air&#x27;</span>,<span class="string">&#x27;Apple Pro&#x27;</span>,<span class="string">&#x27;联想E450&#x27;</span>,<span class="string">&#x27;戴尔灵越7000&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> city=[<span class="string">&#x27;巴黎&#x27;</span>,<span class="string">&#x27;伦敦&#x27;</span>,<span class="string">&#x27;罗马&#x27;</span>,<span class="string">&#x27;马德里&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(laptop,city);<span class="comment">//[ &#x27;小米Air&#x27;, &#x27;Apple Pro&#x27;, &#x27;联想E450&#x27;, &#x27;戴尔灵越7000&#x27; ] [ &#x27;巴黎&#x27;, &#x27;伦敦&#x27;, &#x27;罗马&#x27;, &#x27;马德里&#x27; ]</span></span><br><span class="line"><span class="comment">//通过下标来获取元素</span></span><br><span class="line"><span class="built_in">console</span>.log( city[<span class="number">4</span>] );<span class="comment">//undefined reason:city[4]不存在</span></span><br></pre></td></tr></table></figure>

<h4 id="2-访问数组中的元素"><a href="#2-访问数组中的元素" class="headerlink" title="(2)访问数组中的元素"></a>(2)访问数组中的元素</h4><p> 数组[下标]  下标是从0开始，第一个元素的下标就是0</p>
<h4 id="3-内置构造函数"><a href="#3-内置构造函数" class="headerlink" title="(3)内置构造函数"></a>(3)内置构造函数</h4><p> new Array(元素1,元素2…);</p>
<p> new Array(3)  初始化元素个数为3，也可以添加更多个元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> car=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;奔驰&#x27;</span>,<span class="string">&#x27;宝马&#x27;</span>,<span class="string">&#x27;奥迪&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> car2=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">car2[<span class="number">0</span>]=<span class="string">&#x27;凯迪拉克&#x27;</span>;</span><br><span class="line">car2[<span class="number">1</span>]=<span class="string">&#x27;沃尔沃&#x27;</span>;</span><br><span class="line">car2[<span class="number">2</span>]=<span class="string">&#x27;捷豹&#x27;</span>;</span><br><span class="line">car2[<span class="number">3</span>]=<span class="string">&#x27;路虎&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car2);<span class="comment">//[ &#x27;凯迪拉克&#x27;, &#x27;沃尔沃&#x27;, &#x27;捷豹&#x27;, &#x27;路虎&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数组，保存若干个课程名称；</span></span><br><span class="line"><span class="keyword">var</span> course=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&#x27;JS基础&#x27;</span>,<span class="string">&#x27;NodeJS&#x27;</span>,<span class="string">&#x27;HTML&#x27;</span>,<span class="string">&#x27;CSS&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(course);<span class="comment">//[ &#x27;JS基础&#x27;, &#x27;NodeJS&#x27;, &#x27;HTML&#x27;, &#x27;CSS&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建数组，初始化长度为5，添加篮球场上的五个位置</span></span><br><span class="line"><span class="keyword">var</span> ball=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">ball[<span class="number">0</span>]=<span class="string">&#x27;大前锋&#x27;</span>;</span><br><span class="line">ball[<span class="number">1</span>]=<span class="string">&#x27;小前锋&#x27;</span>;</span><br><span class="line">ball[<span class="number">2</span>]=<span class="string">&#x27;中锋&#x27;</span>;</span><br><span class="line">ball[<span class="number">3</span>]=<span class="string">&#x27;控球后卫&#x27;</span>;</span><br><span class="line">ball[<span class="number">4</span>]=<span class="string">&#x27;得分后卫&#x27;</span>;</span><br><span class="line">ball[ball.length]=<span class="string">&#x27;普通后卫&#x27;</span>;</span><br><span class="line">ball[ball.length]=<span class="string">&#x27;进攻后卫&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ball);<span class="comment">//[ &#x27;大前锋&#x27;, &#x27;小前锋&#x27;, &#x27;中锋&#x27;, &#x27;控球后卫&#x27;, &#x27;得分后卫&#x27;, &#x27;普通后卫&#x27;, &#x27;进攻后卫&#x27; ]</span></span><br><span class="line"><span class="comment">//获取数组的长度</span></span><br><span class="line"><span class="built_in">console</span>.log(ball.length);<span class="comment">//7</span></span><br></pre></td></tr></table></figure>

<h4 id="4-数组的长度"><a href="#4-数组的长度" class="headerlink" title="(4)数组的长度"></a>(4)数组的长度</h4><p> 数组.length  获取数组中元素的个数</p>
<p>  作用：在数组的末尾添加新的元素</p>
<p>  数组[数组.length] = 值;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空数组，使用数组长度添加若干个国家名称。</span></span><br><span class="line"><span class="keyword">var</span> country=[];</span><br><span class="line">country[country.length]=<span class="string">&#x27;china&#x27;</span>;</span><br><span class="line">country[country.length]=<span class="string">&#x27;America&#x27;</span>;</span><br><span class="line">country[country.length]=<span class="string">&#x27;japan&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(country);<span class="comment">//[ &#x27;china&#x27;, &#x27;America&#x27;, &#x27;japan&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> country);<span class="comment">//object</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> person);<span class="comment">//object</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数组的分类"><a href="#2-数组的分类" class="headerlink" title="2.数组的分类"></a>2.数组的分类</h3><p> 数组分为索引数组和关联数组</p>
<p> 索引数组以0以上的整数作为下标</p>
<p> 关联数组以字符串作为下标，只能单独的添加元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用字符串作为下标————关联数组</span></span><br><span class="line"><span class="keyword">var</span> person=[];</span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>]=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">person[<span class="string">&#x27;age&#x27;</span>]=<span class="number">18</span>;</span><br><span class="line">person[<span class="string">&#x27;sex&#x27;</span>]=<span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">person[<span class="string">&#x27;phone&#x27;</span>]=<span class="string">&#x27;18112345678&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//[ name: &#x27;tom&#x27;, age: 18, sex: &#x27;男&#x27;, phone: &#x27;18112345678&#x27; ]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">  <span class="comment">//key要遍历的元素的下标</span></span><br><span class="line">  <span class="comment">//person[key] 下标对应的元素</span></span><br><span class="line">  <span class="built_in">console</span>.log(key,person[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*name tom</span></span><br><span class="line"><span class="comment">age 18</span></span><br><span class="line"><span class="comment">sex 男</span></span><br><span class="line"><span class="comment">phone 18112345678</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="3-遍历数组"><a href="#3-遍历数组" class="headerlink" title="3.遍历数组"></a>3.遍历数组</h3><h4 id="1-for-in"><a href="#1-for-in" class="headerlink" title="(1)for-in"></a>(1)for-in</h4><p>for(var key in 数组){ key  要遍历的下标 数组[key] 下标对应的元素}既可以遍历关联数组，也可以遍历索引数组。</p>
<p> 练习：创建数组，包含有多个学生的成绩，获取总成绩。</p>
<h4 id="2-循环"><a href="#2-循环" class="headerlink" title="(2)循环"></a>(2)循环</h4><p>for(var i=0;i&lt;数组.length;i++){ i  代表下标   0 ~ 数组长度-1 数组[i]  代表下标对应的元素}只能遍历索引数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建数组，包含多个姓名，查询tom出现的次数</span></span><br><span class="line"><span class="keyword">var</span> names=[<span class="string">&#x27;kate&#x27;</span>,<span class="string">&#x27;king&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;scott&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>];</span><br><span class="line"><span class="comment">//遍历数组，获取每个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,count=<span class="number">0</span>;i&lt;names.length;i++)&#123;</span><br><span class="line">  <span class="comment">//如果每个元素为tom，则次数加1</span></span><br><span class="line">  <span class="keyword">if</span>(names[i]==<span class="string">&#x27;tom&#x27;</span>)&#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建函数getAvg，传递一个参数(一组工资)，返回工资的平均值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAvg</span>(<span class="params">salary</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//salary就是一个数组</span></span><br><span class="line">  <span class="comment">//遍历salary，获取数组元素的和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,sum=<span class="number">0</span>;i&lt;salary.length;i++)&#123;</span><br><span class="line">    sum+=salary[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//平均=总和/元素个数</span></span><br><span class="line">  <span class="keyword">return</span> sum/salary.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( getAvg([<span class="number">8000</span>,<span class="number">14000</span>,<span class="number">4000</span>,<span class="number">9000</span>]) );<span class="comment">//8750</span></span><br></pre></td></tr></table></figure>

<h3 id="4-数组API-方法"><a href="#4-数组API-方法" class="headerlink" title="4.数组API(方法)"></a>4.数组API(方法)</h3><p> (Application Programming Interface)</p>
<p> API 应用程序编程接口，预定义好的一些方法或者函数</p>
<p> toString()  将数组中的元素按照逗号组合成字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;king&#x27;</span>];</span><br><span class="line"><span class="comment">//数组转为字符串</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.toString() );<span class="comment">//tom,jerry,king</span></span><br></pre></td></tr></table></figure>

<p> join(‘-‘)  将数组中的元素按照指定字符组合成字符串，默认是逗号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;king&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.join(<span class="string">&#x27;-&#x27;</span>) );<span class="comment">//tom-jerry-king</span></span><br></pre></td></tr></table></figure>

<p> concat(arr2,arr3) 拼接多个数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;jerry&#x27;</span>,<span class="string">&#x27;king&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2=[<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;lucy&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> arr3=[<span class="string">&#x27;smith&#x27;</span>,<span class="string">&#x27;white&#x27;</span>];</span><br><span class="line"><span class="comment">//拼接多个数组中的元素</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.concat(arr2,arr3) ;</span><br><span class="line"><span class="comment">/*[</span></span><br><span class="line"><span class="comment">  &#x27;tom&#x27;,   &#x27;jerry&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;king&#x27;,  &#x27;david&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;lucy&#x27;,  &#x27;smith&#x27;,</span></span><br><span class="line"><span class="comment">  &#x27;white&#x27;</span></span><br><span class="line"><span class="comment">]*/</span></span><br></pre></td></tr></table></figure>

<p> slice(start, end) 截取数组中的元素，start开始的下标，end结束的下标，不包含end本身，如果是负数表示倒数；返回一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;ajax&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">1</span>,<span class="number">4</span>) );<span class="comment">//[ &#x27;html&#x27;, &#x27;css&#x27;, &#x27;ajax&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">-3</span>,<span class="number">-1</span>) );<span class="comment">//[ &#x27;vue&#x27;, &#x27;react&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p> splice(start, count, value1,value2…) 删除数组中的元素，start开始的下标，count删除的数量，value删除后插入的元素； 返回删除的元素，原数组会发生变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;nodejs&#x27;</span>,<span class="string">&#x27;ajax&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>,<span class="number">2</span>) );<span class="comment">//[ &#x27;js&#x27;, &#x27;nodejs&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ &#x27;html&#x27;, &#x27;css&#x27;, &#x27;ajax&#x27;, &#x27;vue&#x27;, &#x27;react&#x27;, &#x27;angular&#x27; ]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;nodejs&#x27;</span>,<span class="string">&#x27;ajax&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">-3</span>,<span class="number">1</span>) );<span class="comment">//[ &#x27;vue&#x27; ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&#x27;html&#x27;,&#x27;css&#x27;,&#x27;js&#x27;,&#x27;nodejs&#x27;,&#x27;ajax&#x27;,&#x27;react&#x27;,&#x27;angular&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;nodejs&#x27;</span>,<span class="string">&#x27;ajax&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;react&#x27;</span>,<span class="string">&#x27;angular&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">-3</span>,<span class="number">0</span>,<span class="string">&#x27;ionic&#x27;</span>,<span class="string">&#x27;html5&#x27;</span>) );<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&#x27;html&#x27;,&#x27;css&#x27;,&#x27;js&#x27;,&#x27;nodejs&#x27;,&#x27;ajax&#x27;,&#x27;ionic&#x27;,&#x27;html5&#x27;,&#x27;vue&#x27;,&#x27;react&#x27;,&#x27;angular&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;ionic&#x27;</span>,<span class="string">&#x27;html5&#x27;</span>) );<span class="comment">//[]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&#x27;html&#x27;,&#x27;ionic&#x27;,&#x27;html5&#x27;,&#x27;css&#x27;,&#x27;js&#x27;,&#x27;nodejs&#x27;,&#x27;ajax&#x27;,&#x27;vue&#x27;,&#x27;react&#x27;,&#x27;angular&#x27;]</span></span><br></pre></td></tr></table></figure>

<p> reverse()  翻转数组中的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//翻转数组中的元素</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.reverse() );<span class="comment">//[ &#x27;d&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;a&#x27; ]</span></span><br></pre></td></tr></table></figure>

<p> sort()  对数组中的元素进行排序，默认按照Unicode码从小到大排序</p>
<p>对数字排序sort(function(a,b){  return a-b;  //从小到大排序 // return b-a;  //从大到小排序})</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对数组元素排序</span></span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">70</span>,<span class="number">23</span>,<span class="number">590</span>,<span class="number">84</span>,<span class="number">46</span>];</span><br><span class="line"><span class="comment">//回调函数————匿名函数以实参传递</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//return a-b;//从小到大</span></span><br><span class="line">  <span class="keyword">return</span> b-a; <span class="comment">//从大到小//[ 590, 84, 70, 46, 23 ]</span></span><br><span class="line">&#125; ) );</span><br></pre></td></tr></table></figure>

<p> push()  往数组的末尾添加元素，返回数组的长度</p>
<p> pop()  删除数组末尾的元素，返回删除的元素</p>
<p> unshift()  往数组的开头添加元素，返回数组的长度</p>
<p> shift() 删除数组开头的元素，返回删除的元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;js&#x27;</span>];</span><br><span class="line"><span class="comment">//作用</span></span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line"><span class="comment">//返回值</span></span><br><span class="line"><span class="comment">//在数组末尾添加元素</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.push(<span class="string">&#x27;nodejs&#x27;</span>) );<span class="comment">//4</span></span><br><span class="line"><span class="comment">//删除数组末尾的元素</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() );<span class="comment">//js</span></span><br><span class="line"><span class="comment">//在数组开头添加元素 </span></span><br><span class="line"><span class="built_in">console</span>.log( arr.unshift(<span class="string">&#x27;ajax&#x27;</span>) );<span class="comment">//4</span></span><br><span class="line"><span class="comment">//在数组开头删除元素</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.shift() );<span class="comment">//ajax</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ &#x27;html&#x27;, &#x27;css&#x27;, &#x27;js&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="5-二维数组"><a href="#5-二维数组" class="headerlink" title="5.二维数组"></a>5.二维数组</h3><p> 数组中的每个元素也是数组</p>
<p> var arr=[ [], [], [] .. ]</p>
<p> 访问二维数组中的元素  arr[] []</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pro=[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;广东&#x27;</span>,<span class="string">&#x27;江苏&#x27;</span>];</span><br><span class="line"><span class="comment">//var city=[&#x27;海淀&#x27;,&#x27;朝阳&#x27;,&#x27;东城&#x27;,&#x27;西城&#x27;,&#x27;广州&#x27;,&#x27;深圳&#x27;,&#x27;惠州&#x27;,&#x27;南京&#x27;,&#x27;苏州&#x27;,&#x27;无锡&#x27;];</span></span><br><span class="line"><span class="comment">//二维数组</span></span><br><span class="line"><span class="keyword">var</span> city=[</span><br><span class="line">  [<span class="string">&#x27;海淀&#x27;</span>,<span class="string">&#x27;朝阳&#x27;</span>,<span class="string">&#x27;东城&#x27;</span>,<span class="string">&#x27;西城&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;广州&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="string">&#x27;惠州&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;南京&#x27;</span>,<span class="string">&#x27;苏州&#x27;</span>,<span class="string">&#x27;无锡&#x27;</span>]</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log( city[<span class="number">0</span>][<span class="number">2</span>] );<span class="comment">//东城</span></span><br></pre></td></tr></table></figure>

<h3 id="6-字符串"><a href="#6-字符串" class="headerlink" title="6.字符串"></a>6.字符串</h3><p> 包装对象：目的是让原始类型数据像引用类型一样，具有属性和方法。</p>
<p> JS提供了3种包装对象：String  Number  Boolean</p>
<p> 将任意数据转为字符串</p>
<p>  new String()  返回对象，使用和字符没有区别</p>
<p>  String()  返回字符串   //将任意数据转为字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//将数据转成字符串，并返回对象</span></span><br><span class="line"><span class="keyword">var</span> str2=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2,<span class="keyword">typeof</span> str2);<span class="comment">//[String: &#x27;1&#x27;] object</span></span><br><span class="line"><span class="built_in">console</span>.log(str2+<span class="number">2</span>);<span class="comment">//12</span></span><br><span class="line"><span class="comment">//将数组转为字符串，返回字符串</span></span><br><span class="line"><span class="comment">//toString()</span></span><br><span class="line"><span class="keyword">var</span> str3=<span class="built_in">String</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str3,<span class="keyword">typeof</span> str3);<span class="comment">//true string</span></span><br></pre></td></tr></table></figure>

<h4 id="1-转义字符-——"><a href="#1-转义字符-——" class="headerlink" title="(1)转义字符 —— \"></a>(1)转义字符 —— \</h4><p>  转换字符的意义</p>
<p>  用法：在要转义的字符前加 \</p>
<p>  &#39;  将引号转义成普通的字符</p>
<p>  \n  将字符n转义成换行符</p>
<p>  \t  将字符t转义成制表符(tab键效果)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;It\&#x27;s a dog&#x27;</span>);<span class="comment">//It&#x27;s a dog</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello \nworld&#x27;</span>);</span><br><span class="line"><span class="comment">//hello </span></span><br><span class="line"><span class="comment">//world</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a\tb&#x27;</span>);<span class="comment">//a	b</span></span><br><span class="line"><span class="comment">//打印出现 welcome to chi\na</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;welcome to chi\\na&#x27;</span>);<span class="comment">//welcome to chi\na</span></span><br></pre></td></tr></table></figure>

<h4 id="2-字符串API"><a href="#2-字符串API" class="headerlink" title="(2)字符串API"></a>(2)字符串API</h4><p> length  获取字符串的长度</p>
<p> charAt()  获取下标对应的字符，也可以使用数组形式 字符串[下标]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;javascript&#x27;</span>;</span><br><span class="line"><span class="comment">//计算字符串的长度</span></span><br><span class="line"><span class="built_in">console</span>.log( str.length );<span class="comment">//10</span></span><br><span class="line"><span class="comment">//获取下标对应的字符</span></span><br><span class="line"><span class="built_in">console</span>.log( str[<span class="number">2</span>] );<span class="comment">//v</span></span><br><span class="line"><span class="built_in">console</span>.log( str.charAt(<span class="number">4</span>) );<span class="comment">//s</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历字符串，打印出每一个字符（循环下标）</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;javascript&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(str[i],str.charAt(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">j j</span></span><br><span class="line"><span class="comment">a a</span></span><br><span class="line"><span class="comment">v v</span></span><br><span class="line"><span class="comment">a a</span></span><br><span class="line"><span class="comment">s s</span></span><br><span class="line"><span class="comment">c c</span></span><br><span class="line"><span class="comment">r r</span></span><br><span class="line"><span class="comment">i i</span></span><br><span class="line"><span class="comment">p p</span></span><br><span class="line"><span class="comment">t t</span></span><br><span class="line"><span class="comment">s s*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> charCodeAt()  获取某个字符的Unicode码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>.charCodeAt());<span class="comment">//97</span></span><br></pre></td></tr></table></figure>



<p> indexOf(value, start) 查找某个字符串的下标，value要查找的字符串，start开始的下标，默认是0，如果找不到返回-1</p>
<p> lastIndexOf(value)  查找某个字符串最后一次出现的下标，找不到返回-1</p>
<p> 练习：声明变量保存字符串，检测该字符串中是否含有@，如果有打印“合法的邮箱“，否则打印“不合法邮箱”。</p>
<p> toUpperCase()  将英文字母转为大写</p>
<p> toLowerCase()  将英文字母转为小写</p>
<p> 练习：声明变量保存4个英文字母，无限循环弹出提示框，输入验证码(不区分大小写)，如果输入正确结束循环。</p>
<p> 06_code.js  06_code.html</p>
<p> slice(start, end)  截取字符串，start开始的下标，end结束的下标，不包含end本身；如果为负数表示倒数；end为空截取到最后。</p>
<p> 练习：声明变量保存邮箱，分别截取出邮箱的用户名和域名  <a href="mailto:&#116;&#x6f;&#109;&#49;&#x32;&#x33;&#52;&#53;&#x36;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#116;&#x6f;&#109;&#49;&#x32;&#x33;&#52;&#53;&#x36;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a></p>
<p> substr(start, count)  截取字符串，start开始的下标，count截取的长度，如果count为空截取到最后，start为负数表示倒数</p>
<p> 练习：声明变量保存身份证号，截取出年月日和性别；打印“1998年06月20日 性别女”</p>
<p>  110236199806202589</p>
<p> substring(start,end)  截取字符串，start开始的下标，end结束的下标，如果end为空截取到最后；如果下标为负数，自动转成0。</p>
<p> 对比slice和substring</p>
<p> slice中下标允许使用负数，substring会自动将负数转为0；slice中下标的顺序start小于end，substring中下标大小不分顺序</p>
<p> 练习：将一个英文单词的首字母转大写，其余的字母转小写  heLLo  -&gt;  Hello</p>
<p> split(sep) 将字符串按照指定字符分隔成数组，sep是指定的字符</p>
<p> 练习：使用split分隔邮箱，获取用户名和域名</p>
<p>4.匹配模式(掌握)</p>
<p> 作用：用于查找、替换字符串</p>
<p> match(value)  用于查找匹配的字符串，返回所有满足条件的元素，组成数组 /china/ig </p>
<p> i  -&gt; ignore  忽略大小写</p>
<p> g -&gt; global  全局查找</p>
<p> search(value) 用于查找满足条件的第一个字符串的下标，如果找不到返回-1</p>
<p> replace(value1,value2) 查找并替换，value1要查找的字符串，value2要替换的字符串</p>
<p>5.Math对象</p>
<p> 不需要使用new创建，可以直接使用</p>
<p> PI  取圆周率</p>
<p> abs()  取绝对值</p>
<p> floor()  向下取整</p>
<p> ceil()  向上取整</p>
<p> round()  四舍五入取整</p>
<p> max()  取一组数字的最大值</p>
<p> min()  取一组数字的最小值</p>
<p> pow()  求x的y次幂</p>
<p> random()  取随机数  &gt;=0  &lt;1</p>
<p> 练习：随机产生0~9之间的一个整数。</p>
]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令思维导图</title>
    <url>/2020/08/31/git%C2%8D%C2%8D%E5%91%BD%E4%BB%A4%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    <content><![CDATA[<p>2020.8.31记</p>
<a id="more"></a>

<p>参考链接：<a href="https://www.processon.com/view/link/5f4c93301e0853452d43f347">mindmap</a></p>
<p><img src="/images/git/git%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.png"></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts函数和对象</title>
    <url>/2020/08/30/JavaScripts%E5%87%BD%E6%95%B0%E5%92%8C%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>2020.8.30记</p>
<a id="more"></a>

<h3 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h3><p> parseInt()/parseFloat()…</p>
<p> 分为系统函数和自定义函数</p>
<p> 自定义函数</p>
<p>  function: 功能体,函数，用于封装反复执行的代码，可以接受若干个数据，返回处理的结果。——饺子机</p>
<h4 id="1-创建普通的函数"><a href="#1-创建普通的函数" class="headerlink" title="(1)创建普通的函数"></a>(1)创建普通的函数</h4><p><strong>function 函数名称(){ 函数体; //封装的反复执行的代码}</strong></p>
<p><strong>调用</strong></p>
<p><strong>函数名称();</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//练习：使用函数封装计算1~100之间所有整数的和，并调用三次。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">getSum();</span><br><span class="line">getSum();</span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure>

<h4 id="2-创建带有参数的函数"><a href="#2-创建带有参数的函数" class="headerlink" title="(2)创建带有参数的函数"></a>(2)创建带有参数的函数</h4><p><strong>function 函数名称(参数列表){//形参 -&gt;形式上的参数 函数体;}</strong></p>
<p><strong>调用</strong></p>
<p><strong>函数名称(参数列表);</strong> //实参 -&gt; 传递的数据</p>
<p>参数列表：可以是0个或者多个，之间用逗号隔开；创建时的参数称为形参，调用时的参数称为实参，实参会赋值给形参。</p>
<p>形参可以理解为是一个变量，只是未赋值，默认是undefined.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建带有参数的函数</span></span><br><span class="line"><span class="comment">//计算任意两个数字相加的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1,num2</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//在调用的时候，实参的第一个值会赋给num1，实参的第二个值赋给num2;</span></span><br><span class="line">  <span class="built_in">console</span>.log(num1+num2);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建函数，传递1个参数，计算1~任意数字之间的和。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//计算1~n之间所有数字的和</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line"> getSum(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建函数，传递2个参数，计算任意两个年份之间的闰年个数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params">n1,n2</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//计算n1~n2之间的闰年个数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=n1,sum=<span class="number">0</span>;i&lt;=n2;i++)&#123;<span class="comment">//判断i是否为闰年，如果是sum++</span></span><br><span class="line">	<span class="keyword">if</span>(i%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; i%<span class="number">100</span>!=<span class="number">0</span> || i%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">	  sum++;</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(sum);</span><br><span class="line">&#125;</span><br><span class="line">getCount(<span class="number">2000</span>,<span class="number">2100</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-带有返回值的函数"><a href="#3-带有返回值的函数" class="headerlink" title="(3)带有返回值的函数"></a>(3)带有返回值的函数</h4><p><strong>function 函数名称(参数列表){ 函数体; return 值;}</strong></p>
<p><strong>调用</strong></p>
<p><strong>函数名称(参数列表)</strong></p>
<p> return表示函数执行后，返回的结果；可以保存下来。</p>
<p> 注意事项：</p>
<p>  ①如果没有return和return后没有值，结果都是undefined</p>
<p>  ②return后的所有代码都不会执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算任意三个数字相加的和，并把结果返回</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b+c;<span class="comment">//return后的代码不执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把函数的返回结果保存到变量中</span></span><br><span class="line"><span class="keyword">var</span> num1=add(<span class="number">3</span>,<span class="number">7</span>,<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num1);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建函数getMax，返回任意两个数字中的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  if(a&gt;b)&#123;</span></span><br><span class="line"><span class="comment">    return a;</span></span><br><span class="line"><span class="comment">  &#125;else&#123;</span></span><br><span class="line"><span class="comment">    return b;</span></span><br><span class="line"><span class="comment">  &#125;*/</span></span><br><span class="line">  <span class="keyword">return</span> a&gt;b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n1=getMax(<span class="number">131</span>,<span class="number">56</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建函数getMax2，返回任意三个数字的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMax2</span>(<span class="params">a,b,c</span>)</span>&#123;   <span class="comment">//比较前两个，获取最大，并保存到变量</span></span><br><span class="line">  <span class="keyword">var</span> max= a&gt;b ? a : b;   <span class="comment">//max和c比较，把最大值返回</span></span><br><span class="line">  <span class="keyword">return</span> max&gt;c ? max : c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> big=getMax2(<span class="number">3</span>,<span class="number">7</span>,<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(big);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1-等待付款 2-等待发货 3-运输中 4-已签收 5-已取消 其它-无法追踪</span></span><br><span class="line"><span class="comment">//创建函数getStatus，传递状态码，返回对应的中文</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStatus</span>(<span class="params">code</span>)</span>&#123;<span class="comment">//code就是传递的状态码</span></span><br><span class="line">  <span class="keyword">switch</span>(code)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;等待付款&#x27;</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;等待发货&#x27;</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;运输中&#x27;</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;已签收&#x27;</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;已取消&#x27;</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">	  <span class="keyword">return</span> <span class="string">&#x27;无法追踪&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s=getStatus(<span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否闰年，是返回true，不是返回false</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRun</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(year%<span class="number">4</span>==<span class="number">0</span> &amp;&amp; year%<span class="number">100</span>!=<span class="number">0</span> || year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDays2</span>(<span class="params">year</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//判断年份year是否为闰年</span></span><br><span class="line">  <span class="comment">//如果是-&gt;true  不是-&gt;false</span></span><br><span class="line">  <span class="keyword">if</span>( isRun(year) )&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">366</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">365</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d=getDays2(<span class="number">2024</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5! = 5*4*3*2*1</span></span><br><span class="line"><span class="comment">//1~100 所有整数的和</span></span><br><span class="line"><span class="comment">//计算1~任意数字之间所有整数阶乘的和</span></span><br><span class="line"><span class="comment">//传递一个参数</span></span><br><span class="line"><span class="comment">//步骤1：创建函数getJC，传递1个参数，计算任意数字的阶乘。1~n所有整数乘积</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getJC</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,ride=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    ride*=i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ride;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n1=getJC(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//步骤2：创建函数getSum，传递1个参数，计算1~任意数字之间所有整数的和 1~n的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>,sum=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="comment">//i代表中间所有的整数</span></span><br><span class="line">	<span class="comment">//获取数字的阶乘getJC(i)</span></span><br><span class="line">    <span class="comment">//sum+=i; //把所有的数字加到sum</span></span><br><span class="line">	sum+=getJC(i);<span class="comment">//把所有数字的阶乘加到sum</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n2=getSum(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(n2);</span><br></pre></td></tr></table></figure>

<h3 id="2-变量作用域"><a href="#2-变量作用域" class="headerlink" title="2.变量作用域"></a>2.变量作用域</h3><h4 id="1-作用域"><a href="#1-作用域" class="headerlink" title="(1)作用域"></a>(1)作用域</h4><p>  变量和函数的可访问范围，分为两种</p>
<p>  函数作用域：在函数中使用var关键字声明的变量，只能在函数的内部访问。</p>
<p>  全局作用域：在函数外部使用var声明的变量，可以在任意的位置访问</p>
<p>  注意：在函数内使用var声明的变量是局部变量，不使用var声明的变量是全局变量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局作用域下的变量</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var a=1;</span></span><br><span class="line"><span class="comment">function fn()&#123;</span></span><br><span class="line"><span class="comment">  //函数作用域</span></span><br><span class="line"><span class="comment">  var b=2;</span></span><br><span class="line"><span class="comment">  console.log(a); //访问全局变量a //a=1</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">fn();//访问局部的变量</span></span><br><span class="line"><span class="comment">console.log(b);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> c=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//修改全局变量c</span></span><br><span class="line">  c=<span class="number">5</span>;</span><br><span class="line">  d=<span class="number">9</span>;</span><br><span class="line">&#125; </span><br><span class="line">fun();</span><br><span class="line"><span class="built_in">console</span>.log(c);<span class="comment">//5</span></span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-变量声明提升"><a href="#2-变量声明提升" class="headerlink" title="(2)变量声明提升"></a>(2)变量声明提升</h4><p>  JS程序执行前，会将使用var声明的变量提升到所在作用域的最前边，赋值还是在原来的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//1 </span></span><br></pre></td></tr></table></figure>

<h3 id="3-函数的作用域"><a href="#3-函数的作用域" class="headerlink" title="3.函数的作用域"></a>3.函数的作用域</h3><p> 函数的可访问范围，也分为全局作用域和函数作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//d始终是局部变量，不能被外部访问</span></span><br><span class="line">  <span class="comment">//形参在原来的基础之上加3，和全局的d没有关系</span></span><br><span class="line">  d=d+<span class="number">3</span>;</span><br><span class="line">  <span class="comment">//d=11</span></span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(d);<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<h4 id="1-函数声明提升"><a href="#1-函数声明提升" class="headerlink" title="(1)函数声明提升"></a>(1)函数声明提升</h4><p>  和变量声明提升一样，JS程序执行前，会将function创建的函数提升到所在作用域的最前边，调用可以在任意合法的位置。</p>
<h3 id="4-递归调用"><a href="#4-递归调用" class="headerlink" title="4.递归调用"></a>4.递归调用</h3><p> 在函数的内部调用自身</p>
<p> 递归要有结束的条件，结合return来使用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出3次警示框后结束</span></span><br><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  i++;</span><br><span class="line">  alert(<span class="string">&#x27;long ago&#x27;</span>);</span><br><span class="line">  <span class="comment">//当i为3的时候，结束</span></span><br><span class="line">  <span class="keyword">if</span>(i==<span class="number">3</span>)&#123;</span><br><span class="line">	<span class="comment">//结束函数，不是为了返回某个结果</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//在函数内部调用自身————递归</span></span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用递归来计算1~任意数字之间的和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//当n为1的时候，返回1</span></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n+getSum(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum=getSum(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum);<span class="comment">//5050</span></span><br></pre></td></tr></table></figure>

<h3 id="5-匿名函数"><a href="#5-匿名函数" class="headerlink" title="5.匿名函数"></a>5.匿名函数</h3><p> 没有名称的函数  function(){  }</p>
<h4 id="1-创建函数"><a href="#1-创建函数" class="headerlink" title="(1)创建函数"></a>(1)创建函数</h4><p> 函数声明方式 function fn(){   }</p>
<p> 函数表达式方式 var fun=function(参数列表){ 函数体  }此时的变量fun就是函数名称</p>
<p> 对比fun和fun()的区别</p>
<p>  fun() 是函数的调用，返回函数的调用结果</p>
<p>  fun 是函数的名称，对应的是函数的整体结构</p>
<p> <strong>函数声明和函数表达式创建函数的区别</strong></p>
<p> 函数声明存在函数提升，调用可以在任意合法位置</p>
<p> 函数表达式不存在函数提升，必须先创建，再调用</p>
<p> 练习：使用函数表达式创建函数，计算任意两个数字之间所有整数的和，并返回结果。</p>
<h4 id="2-匿名函数自调用"><a href="#2-匿名函数自调用" class="headerlink" title="(2)匿名函数自调用"></a>(2)匿名函数自调用</h4><p> 目的：创建局部作用域，防止污染全局。</p>
<p>(function(形参列表){ 函数体中的变量和创建的函数只能在内部使用})(实参列表);</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局污染：变量出现后会影响其它的使用</span></span><br><span class="line"><span class="comment">//轮播图</span></span><br><span class="line"><span class="comment">//匿名函数自调用</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//局部变量，不会对全局造成污染</span></span><br><span class="line">  <span class="keyword">var</span> num=<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-回调函数"><a href="#3-回调函数" class="headerlink" title="(3)回调函数"></a>(3)回调函数</h4><p> 将匿名函数以实参形式传递，这个匿名函数就称为“回调函数”；此时的形参就是函数名称，如果要调用匿名函数，只需要  形参名称()</p>
<p>function fn(a){</p>
<p> //a 就是传递的匿名函数的名称 </p>
<p>a();  //执行传递的匿名函数函数体中的代码}</p>
<p>fn( function(){ … } );</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//调用函数的时候，实参赋给形参</span></span><br><span class="line">  <span class="comment">//a=function()&#123; return 1; &#125;</span></span><br><span class="line">  <span class="comment">//此时的a就是函数名称，如果要执行传递的匿名函数中函数体的代码，</span></span><br><span class="line">  <span class="comment">//需要调用函数</span></span><br><span class="line">  <span class="keyword">var</span> num=a();</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="comment">//a和b都是匿名函数的名称</span></span><br><span class="line"><span class="keyword">var</span> num1=a();</span><br><span class="line"><span class="keyword">var</span> num2=a();</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="6-全局函数"><a href="#6-全局函数" class="headerlink" title="6.全局函数"></a>6.全局函数</h3><p> parseInt(string,radix)  将数据转为整型</p>
<p> parseFloat(string)  将数据转为浮点型</p>
<p> encodeURI()  对一个URL中的中文进行编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url=<span class="string">&#x27;http://www.codeboy.com/search?keyword=电脑&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">encodeURI</span>(url);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<p> decodeURI()  对已经编码的URL进行解码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str2=<span class="built_in">decodeURI</span>(str);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br></pre></td></tr></table></figure>

<p> isNaN() 检测一个值是否为NaN 是-&gt;true不是-&gt;false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>+<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">isNaN</span>(<span class="number">1</span>+<span class="literal">true</span>) );</span><br></pre></td></tr></table></figure>

<p> isFinite()  检测一个值是否为有限值 是-&gt;true  不是-&gt;false   1/0  Infinity  无穷 无限值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>/<span class="number">3</span>);<span class="comment">//2</span></span><br><span class="line"><span class="comment">//检测一个值是否为有限值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isFinite</span>(<span class="number">2</span>/<span class="number">3</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p> eval()  执行字符串表达式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//执行字符串中的表达式</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">eval</span>(<span class="string">&#x27;parseInt(3.5)&#x27;</span>) );<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var str&#x3D;prompt(&#39;input expression&#39;);</span><br><span class="line">console.log(str);</span><br><span class="line">console.log(eval(str));</span><br></pre></td></tr></table></figure>

<h3 id="7-对象"><a href="#7-对象" class="headerlink" title="7.对象"></a>7.对象</h3><p> 是引用类型数据</p>
<p> 对象：是一组属性和方法(功能)的集合</p>
<p> 哪些是对象？</p>
<p>  一个手机: 属性颜色，品牌，尺寸；方法有打电话，发短信，看视频，玩游戏;</p>
<p>  一个汽车：属性颜色，品牌，类型；方法有代步，拉货，载客，撞人;</p>
<p>  一个人: 属性性别，姓名，年龄；方法有说话，工作，写代码….</p>
<p>  万物皆对象</p>
<h4 id="1-JS中的对象"><a href="#1-JS中的对象" class="headerlink" title="(1)JS中的对象"></a>(1)JS中的对象</h4><p> 内置对象: JS提供的</p>
<p> 宿主对象: 根据JS不同的执行环境来划分</p>
<p> 自定义对象: 自己创建的对象</p>
<h4 id="2-自定义对象"><a href="#2-自定义对象" class="headerlink" title="(2)自定义对象"></a>(2)自定义对象</h4><p> 对象字面量</p>
<p> 内置构造函数</p>
<p> 自定义构造函数</p>
<h3 id="8-使用对象字面量创建对象"><a href="#8-使用对象字面量创建对象" class="headerlink" title="8.使用对象字面量创建对象"></a>8.使用对象字面量创建对象</h3><p> 使用大括号{ }创建空对象</p>
<p> 属性名和属性值之间用冒号隔开</p>
<p> 多组属性之间用逗号隔开</p>
<p> 属性名中引号可加可不加，如果含有特殊字符必须加引号</p>
<p> { 属性名:属性值, … }</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用对象字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> phone=&#123;</span><br><span class="line">  color:<span class="string">&#x27;black&#x27;</span>,</span><br><span class="line">  brand:<span class="string">&#x27;huawei&#x27;</span>,</span><br><span class="line">  size:<span class="number">6.5</span>,</span><br><span class="line">  madeIn:<span class="string">&#x27;china&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(phone);<span class="comment">//&#123; color: &#x27;black&#x27;, brand: &#x27;huawei&#x27;, size: 6.5, madeIn: &#x27;china&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-访问对象的属性"><a href="#9-访问对象的属性" class="headerlink" title="9.访问对象的属性"></a>9.访问对象的属性</h3><p> 对象.属性名</p>
<p> 对象[‘属性名’]</p>
<p> 可以添加之前不存在的属性；</p>
<p> 如果属性不存在，属性值为undefined</p>
<h3 id="10-使用内置构造函数创建对象"><a href="#10-使用内置构造函数创建对象" class="headerlink" title="10.使用内置构造函数创建对象"></a>10.使用内置构造函数创建对象</h3><p> new Object();  创建一个空的对象</p>
<p> 需要单独添加每一个属性</p>
<p>  对象[‘属性名’] = ‘属性值’</p>
<p>  对象.属性名=’属性值’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用内置构造函数创建对象</span></span><br><span class="line"><span class="keyword">var</span> car=<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">car.id=<span class="number">120</span>;</span><br><span class="line">car.brand=<span class="string">&#x27;BMW&#x27;</span>;</span><br><span class="line">car[<span class="string">&#x27;color&#x27;</span>]=<span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(car);<span class="comment">//&#123; id: 120, brand: &#x27;BMW&#x27;, color: &#x27;black&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="11-遍历对象的属性"><a href="#11-遍历对象的属性" class="headerlink" title="11.遍历对象的属性"></a>11.遍历对象的属性</h3><p> 访问所有的属性</p>
<p>for(var key in 对象){ key  对象中所有属性名 对象[key] 通过属性名找对应的属性值}</p>
<p> 提前声明sum用于保存总和。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象，包含若干个成绩属性，遍历对象中属性获取总成绩。</span></span><br><span class="line"><span class="keyword">var</span> student=&#123;</span><br><span class="line">  chinese:<span class="number">90</span>,</span><br><span class="line">  math:<span class="number">100</span>,</span><br><span class="line">  englist:<span class="number">95</span>,</span><br><span class="line">  history:<span class="number">89</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//遍历对象，获取每一个成绩</span></span><br><span class="line"><span class="keyword">var</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> student)&#123;</span><br><span class="line">  <span class="comment">//key 对象中所有属性名</span></span><br><span class="line">  <span class="comment">//对象[key] 通过属性名找对应的属性值</span></span><br><span class="line">  <span class="built_in">console</span>.log(key,student[key]);</span><br><span class="line">  <span class="comment">//把每一个属性值加到sum中</span></span><br><span class="line">  sum+=student[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"><span class="comment">/*chinese 90</span></span><br><span class="line"><span class="comment">math 100</span></span><br><span class="line"><span class="comment">englist 95</span></span><br><span class="line"><span class="comment">history 89</span></span><br><span class="line"><span class="comment">374*/</span></span><br></pre></td></tr></table></figure>

<h3 id="12-对象中的方法"><a href="#12-对象中的方法" class="headerlink" title="12.对象中的方法"></a>12.对象中的方法</h3><p> 方法也称为成员方法，对应的是一个匿名函数</p>
<p>var person={ name:’tom’, say:function(){  this.name  //this指代当前所在的对象 }};person.say();  //调用方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">  <span class="comment">//成员属性</span></span><br><span class="line">  name:<span class="string">&#x27;jerry&#x27;</span>,</span><br><span class="line">  age:<span class="number">18</span>,</span><br><span class="line">  <span class="comment">//成员方法</span></span><br><span class="line">  say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//在方法中访问当前对象 this</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我的名字叫&#x27;</span>+<span class="built_in">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//调用成员方法</span></span><br><span class="line">person.say();<span class="comment">//我的名字叫jerry</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts运算符</title>
    <url>/2020/08/30/JavaScripts%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<p>2020.8.30记</p>
<a id="more"></a>

<h3 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h3><p>表达式: 由运算符连接的操作数据，所组成的形式。</p>
<p>运算符分为算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、三目运算符</p>
<h4 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="(1)算术运算符"></a>(1)算术运算符</h4><p>  +  -  *  /  % ++  –</p>
<p>  %  取余</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取余</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>%<span class="number">2</span>);<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>%<span class="number">3</span>);<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">-2</span>%<span class="number">3</span>);<span class="comment">//-2</span></span><br></pre></td></tr></table></figure>

<p>  ++ 自增，在原来的基础之上加1</p>
<p>  –  自减，在原来的基础之上减1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num++); <span class="comment">//先打印num的值1，再执行自增</span></span><br><span class="line"><span class="built_in">console</span>.log(++num); <span class="comment">//先执行自增，再打印num的值2</span></span><br></pre></td></tr></table></figure>

<p>  练习：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num-- + --num); <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h4 id="2-比较运算符"><a href="#2-比较运算符" class="headerlink" title="(2)比较运算符"></a>(2)比较运算符</h4><p> &gt;  &lt;  &gt;=  &lt;=  !=  ==  ===(全等于)  !== 全不等于</p>
<p> 返回一个布尔型的值</p>
<p> == 只是比较两个值是否相等</p>
<p> ===  不仅比较值，还会比较类型是否相等</p>
<p>如果数据类型不同，会发生数据类型转换</p>
<p> 3&gt;’10’  字符串转成数字10</p>
<p> ‘3’&gt;’10’  <strong>两个字符串比较的是Unicode码</strong></p>
<p> 3&gt;’10a’ //false</p>
<p> 3&lt;’10a’ //false</p>
<p> 3==’10a’ //false</p>
<p>   ‘10a’  -&gt; NaN</p>
<p>  NaN和任何值比较(&gt; &lt; &gt;= &lt;= == ===)都返回false</p>
<p>  NaN==NaN  返回false</p>
<h4 id="3-逻辑运算符"><a href="#3-逻辑运算符" class="headerlink" title="(3)逻辑运算符"></a>(3)逻辑运算符</h4><p>  或者( || )  关联的两个条件只需要满足其一, 结果是true，否则false</p>
<p>  并且( &amp;&amp; )  关联的两个条件都是true，结果是true，否则false  </p>
<p>  非(反向) !   !false -&gt; true  !true -&gt; false</p>
<p> <strong>逻辑短路</strong></p>
<p>  &amp;&amp; 当第一个条件为false的时候，就不需要再执行第二个条件</p>
<p>  ||  当第一个条件为true的时候，就不需要再执行第二个条件</p>
<p>  注意：逻辑短路无需关注最终结果是true还是false，重点是看是否会执行第二个表达式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//练习：声明变量保存一个人的年龄，如果满18岁，打印&#x27;成年人&#x27;</span></span><br><span class="line"><span class="keyword">var</span> age=<span class="number">11</span>;</span><br><span class="line">age&gt;=<span class="number">18</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="string">&#x27;成年人&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-位运算符-了解"><a href="#4-位运算符-了解" class="headerlink" title="(4)位运算符(了解)"></a>(4)位运算符(了解)</h4><p>  在执行运算的时候，计算机会把数据转成二进制进行运算。</p>
<p> 1 1011  100  101  110  111  1000  1001  1010</p>
<p>  2    4           8</p>
<p> 按位与( &amp; ) 上下两位都是1，结果是1，否则是0</p>
<p> 按位或( | ) 上下两位含有1，结果是1，否则是0</p>
<p> 按位异或( ^ ) 上下两位不同为1，相同为0</p>
<p> 按位右移( &gt;&gt; ) 删除二进制的最后一位或者多位，每次缩小到原来的一半或者更多。</p>
<p> 按位左移( &lt;&lt; ) 在二进制的最后添加0，成倍增加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>&amp;<span class="number">7</span>);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>|<span class="number">9</span>);<span class="comment">//15</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">13</span>|<span class="number">20</span>);<span class="comment">//29</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>^<span class="number">7</span>);<span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>^<span class="number">8</span>);<span class="comment">//13</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">120</span>&gt;&gt;<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="2-三目运算符"><a href="#2-三目运算符" class="headerlink" title="2.三目运算符"></a>2.三目运算符</h3><p> 由三个表达式或者数据组成的形式。</p>
<p> <strong>条件表达式 ? 表达式1 : 表达式2</strong></p>
<p> 如果条件表达式为true，执行表达式1</p>
<p> 如果条件表达式为false，执行表达式2</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//练习：声明两个变量保存数字；比较两个数字的大小，打印最大值。</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">30</span>,b=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> res=a&gt;b ? a : b;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习：声明两个变量分别保存用户名和密码，如果用户名是root，并且密码是123456，打印&#x27;登录成功&#x27;,否则打印&#x27;登录失败&#x27;</span></span><br><span class="line"><span class="keyword">var</span> uname=<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> upwd=<span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> res=(uname==<span class="string">&#x27;root&#x27;</span> &amp;&amp; upwd==<span class="string">&#x27;123456&#x27;</span>) ? <span class="string">&#x27;登录成功&#x27;</span> : <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure>

<h3 id="3-浏览器端函数"><a href="#3-浏览器端函数" class="headerlink" title="3.浏览器端函数"></a>3.浏览器端函数</h3><p>**alert() ** 弹出警示框(消息框)</p>
<p> <strong>prompt()</strong>  弹出提示框(输入框)，需要使用变量来接收输入的值；值的类型是字符串型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出警示框</span></span><br><span class="line">alert(<span class="string">&#x27;web&#x27;</span>);</span><br><span class="line"><span class="comment">//弹出提示框(输入框)</span></span><br><span class="line"><span class="comment">//把输入的值存到变量中</span></span><br><span class="line"><span class="keyword">var</span> str=prompt(<span class="string">&#x27;input your name&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str,<span class="keyword">typeof</span> str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习：弹出两次提示框，分别输入两个数字，计算两个值相加；把相加的结果以警示框形式弹出。</span></span><br><span class="line"><span class="keyword">var</span> num1=prompt(<span class="string">&#x27;input first number&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num2=prompt(<span class="string">&#x27;input second number&#x27;</span>);</span><br><span class="line"><span class="comment">//把num1和num2转为数值型</span></span><br><span class="line">num1=<span class="built_in">Number</span>(num1);</span><br><span class="line">num2=<span class="built_in">Number</span>(num2);</span><br><span class="line"><span class="comment">//弹出相加的结果</span></span><br><span class="line">alert(num1+num2);</span><br></pre></td></tr></table></figure>

<h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4.流程控制"></a>4.流程控制</h3><p> 程序=数据 + 算法</p>
<p> 程序分为顺序执行、选择执行、循环执行</p>
<h4 id="1-if语句"><a href="#1-if语句" class="headerlink" title="(1)if语句"></a>(1)if语句</h4><p><strong>if(条件表达式){  语句;}</strong></p>
<p> 如果条件表达式为true，会执行后边的语句</p>
<p> 在条件表达式中，有一些值默认转成false</p>
<p>  0、NaN、’’、undefined、null</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//满30减12</span></span><br><span class="line"><span class="keyword">var</span> total=<span class="number">28</span>;</span><br><span class="line"><span class="keyword">if</span>(total&gt;=<span class="number">30</span>)&#123;</span><br><span class="line">  total-=<span class="number">12</span>;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(total);</span><br><span class="line"></span><br><span class="line"><span class="comment">//练习：声明变量保存个人签名，如果签名内容为空，给变量赋值&#x27;这家伙很懒，什么也没留下&#x27;；最后打印变量。</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;天大地大&#x27;</span>;</span><br><span class="line"><span class="comment">//判断签名是否为空字符串</span></span><br><span class="line"><span class="keyword">if</span>(str==<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">  str=<span class="string">&#x27;这家伙很懒，什么也没留下&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(!str)&#123;</span></span><br><span class="line"><span class="comment">  str=&#x27;这家伙很懒，什么也没留下&#x27;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure>

<h4 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="(2)if-else语句"></a>(2)if-else语句</h4><p><strong>if(条件表达式){ 语句1;}else{ 语句2;}</strong></p>
<p> 如果条件表达式为true，执行语句1，否则条件表达式为false，执行语句2</p>
<p>如果if或者else后只有一行语句，则后边的大括号可以省略的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果余额足够支付订单金额，支付成功，否则支付失败</span></span><br><span class="line"><span class="keyword">var</span> money=<span class="number">58</span>;<span class="comment">//余额</span></span><br><span class="line"><span class="keyword">var</span> total=<span class="number">70</span>;<span class="comment">//订单金额</span></span><br><span class="line">money&gt;=total ? <span class="built_in">console</span>.log(<span class="string">&#x27;支付成功&#x27;</span>) : <span class="built_in">console</span>.log(<span class="string">&#x27;支付失败&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(money&gt;=total)&#123;</span></span><br><span class="line"><span class="comment">  console.log(&#x27;支付成功&#x27;);</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">  console.log(&#x27;支付失败&#x27;);</span></span><br><span class="line"><span class="comment">  console.log(&#x27;请充值&#x27;);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明变量保存性别的值(1/0),如果是1，打印‘男’；否则打印‘女’</span></span><br><span class="line"><span class="keyword">var</span> sex=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//0-false  1-true</span></span><br><span class="line"><span class="keyword">if</span>(sex)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;女&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-if-else嵌套"><a href="#3-if-else嵌套" class="headerlink" title="(3)if-else嵌套"></a>(3)if-else嵌套</h4><p> 用于判断多种情况</p>
<p><strong>if(条件表达式1){ 语句1;}</strong></p>
<p><strong>else if(条件表达式2){ 语句2;}</strong></p>
<p><strong>else … if(条件表达式n){ 语句n;}</strong></p>
<p><strong>else{ 语句n+1;  //以上所有的条件表达式都是false}</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据订单的状态码来打印对应的中文；声明的变量保存状态码</span></span><br><span class="line"><span class="comment">//1-等待付款 2-等待发货 3-运输中 4-已签收 5-已取消  其它-错误的状态码</span></span><br><span class="line"><span class="keyword">var</span> status=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span>(status==<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;等待付款&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(status==<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;等待发货&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(status==<span class="number">3</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;运输中&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(status==<span class="number">4</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;已签收&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(status==<span class="number">5</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;已取消&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;非法的状态码&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据一个人的成绩进行评判</span></span><br><span class="line"><span class="comment">//声明变量保存成绩</span></span><br><span class="line"><span class="comment">//优秀   90~</span></span><br><span class="line"><span class="comment">//良好   80~90以下</span></span><br><span class="line"><span class="comment">//中等   70~80以下</span></span><br><span class="line"><span class="comment">//及格   60~70以下</span></span><br><span class="line"><span class="comment">//不及格 60以下</span></span><br><span class="line"><span class="keyword">var</span> score=<span class="number">43</span>;</span><br><span class="line"><span class="keyword">if</span>(score&gt;=<span class="number">90</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;优秀&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>)&#123;</span><br><span class="line">  <span class="comment">//分数不大于等于90  score&lt;90   </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;良好&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span>)&#123;  <span class="comment">//score&lt;80</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;中等&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span>)&#123;  <span class="comment">// score&lt;70</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;及格&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  <span class="comment">//score&lt;60</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不及格&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-switch-case语句"><a href="#4-switch-case语句" class="headerlink" title="(4)switch-case语句"></a>(4)switch-case语句</h4><p> 是一种特殊的分支语句，可以根据一个表达式的值，来选择执行不同的程序</p>
<p>**switch(表达式){ case 值1: //如果表达式的值是值1  语句1;  break;  …. case 值n:  语句n;  break; default:  语句n+1;  **//以上所有的表达式和值比较都是false}</p>
<p> 注意：在case中，表达式和值比较实用的是全等于比较，要求值和类型都满足才是true</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据订单的状态码打印对应中文</span></span><br><span class="line"><span class="keyword">var</span> status=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">switch</span>(status)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//如果status的值是1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;等待付款&#x27;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;等待发货&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;运输中&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;已签收&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;已取消&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;错误的状态码&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取星期的值 0~6，星期日~星期六</span></span><br><span class="line"><span class="comment">//根据星期的状态码打印对应中文形式</span></span><br><span class="line"><span class="comment">//声明变量保存星期代码</span></span><br><span class="line"><span class="keyword">var</span> day=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span>(day)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;星期日&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;星期一&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;星期二&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;星期三&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;错误的星期代码&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>对比if else嵌套和switch-case</strong></p>
<p> 相同点：两者都可以用于多项分支语句</p>
<p> 不同点：if-else既可以判断相等，也可以判断不等的情况，使用范围更广；switch-case只能用于全等于的比较，结构上更为清晰，执行效率相对高。</p>
]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts数据类型</title>
    <url>/2020/08/30/JavaScripts%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>2020.8.30记</p>
<a id="more"></a>

<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><p> 数据分为原始类型和引用类型</p>
<p> 原始类型分为数值型、字符串型、布尔型、未定义型、空</p>
<h4 id="1-数值型"><a href="#1-数值型" class="headerlink" title="(1)数值型"></a>(1)数值型</h4><p> 分为整型和浮点型</p>
<p> 整型在内存中占4个字节，浮点型占8个字节</p>
<p> 八进制  以0开头， 例如 013 -&gt; 11</p>
<p> 十六进制  以0X开头，  例如  0XA -&gt; 10</p>
<p>  A F 代表10 15   不区分大小写</p>
<p>  0XFF -&gt; 255</p>
<p> 浮点型分为普通小数和指数型小数</p>
<p>  3.14E6  -&gt;  31400000</p>
<p>  3.14E-6  -&gt;  0.00000314</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">12</span>;<span class="comment">//12</span></span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">013</span>;<span class="comment">//11</span></span><br><span class="line"><span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="number">0XF</span>;<span class="comment">//15</span></span><br><span class="line"><span class="keyword">var</span> num5=<span class="number">3.14E6</span>;<span class="comment">//3140000  </span></span><br><span class="line"><span class="keyword">var</span> num6=<span class="number">3.14E-6</span>;<span class="comment">//0.00000314 </span></span><br></pre></td></tr></table></figure>

<p>typeof 检测数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num5=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num6);</span><br></pre></td></tr></table></figure>

<h4 id="2-字符串型"><a href="#2-字符串型" class="headerlink" title="(2)字符串型"></a>(2)字符串型</h4><p> 数据被引号包含就是字符串类型，不区分单双引号</p>
<p>  查看任意一个字符的Unicode码</p>
<p>   ‘a’.charCodeAt()  //97]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;字&#x27;</span>.charCodeAt() );<span class="comment">//查看自己姓名的Unicode码</span></span><br></pre></td></tr></table></figure>

<h4 id="3-布尔型"><a href="#3-布尔型" class="headerlink" title="(3)布尔型"></a>(3)布尔型</h4><p> true/false</p>
<p> 在程序中表示真或者假</p>
<p> 一般用于是否的结果，例如是否登录，是否注册，是否在售，是否为会员…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isLogin=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> isIndex=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isLogin,<span class="keyword">typeof</span> isIndex);</span><br></pre></td></tr></table></figure>

<h4 id="4-未定义型"><a href="#4-未定义型" class="headerlink" title="(4)未定义型"></a>(4)未定义型</h4><p> 声明了变量未赋值，结果就是undefined </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="built_in">console</span>.log(age,<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure>

<h4 id="5-空——null"><a href="#5-空——null" class="headerlink" title="(5)空——null"></a>(5)空——null</h4><p> 常和引用类型数据一起使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h3><h4 id="1-隐式转换"><a href="#1-隐式转换" class="headerlink" title="(1)隐式转换"></a>(1)隐式转换</h4><p>  ①数字+字符串  数字转换成字符串</p>
<p>   1+’2’  // ‘12’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="number">1</span>+<span class="string">&#x27;2&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str1,<span class="keyword">typeof</span> str1);<span class="comment">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  ②数字+布尔型  布尔型转成数字 true-&gt;1 false-&gt;0</p>
<p>   3+true  //4</p>
<p>   3+false  //3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">3</span>+<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num,<span class="keyword">typeof</span> num);</span><br></pre></td></tr></table></figure>

<p>  ③字符串+布尔型 布尔型转成字符串</p>
<p>   ‘5’+true  //‘5true’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str3=<span class="string">&#x27;5&#x27;</span>+<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3,<span class="keyword">typeof</span> str3);<span class="comment">//&#x27;5true&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  JS中加号(+)的作用</p>
<p>   执行加法运算</p>
<p>   执行字符串拼接</p>
<p>  减法(-)、乘法(*)、除法(/) 隐式换行</p>
<p>   将运算符两端的数据转为数值型(自动调用Number)，如果转换失败，返回NaN(Not a Number)，不是一个数字，任何值和NaN执行减乘除运算符都会返回NaN</p>
<h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="(2)强制转换"></a>(2)强制转换</h4><p> ①将任意的数据强制转为数值型</p>
<p>  Number()</p>
<p>Number(‘a’);  //NaNNumber(‘1’);  //1Number(‘1a’);  //NaNNumber(undefined);  //NaNNumber(null);  //0Number(true);  //1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将任意的数据强制转为数值型</span></span><br><span class="line"><span class="keyword">var</span> num1=<span class="built_in">Number</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">Number</span>(<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="built_in">Number</span>(<span class="literal">null</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num4=<span class="built_in">Number</span>(<span class="literal">true</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> num5=<span class="built_in">Number</span>(<span class="string">&#x27;1a&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(num5,<span class="keyword">typeof</span> num5);</span><br></pre></td></tr></table></figure>

<p> ②将数据转为整型</p>
<p>  parseInt()</p>
<p>  常用于将字符串或数字转为整型，其它的数据返回NaN；如果要转换的字符串以非数字开头，也返回NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制转为整型</span></span><br><span class="line"><span class="keyword">var</span> num6=<span class="built_in">parseInt</span>(<span class="string">&#x27;3.5&#x27;</span>);<span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> num7=<span class="built_in">parseInt</span>(<span class="string">&#x27;1a&#x27;</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> num8=<span class="built_in">parseInt</span>(<span class="string">&#x27;a1&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num9=<span class="built_in">parseInt</span>(<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<p> ③将数据转为浮点型</p>
<p>  parseFloat()</p>
<p>  和parseInt的用法基本一致，只是转的数据是浮点型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转为浮点型</span></span><br><span class="line"><span class="keyword">var</span> num13=<span class="built_in">parseFloat</span>(<span class="string">&#x27;1.5a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num13,<span class="keyword">typeof</span> num13);<span class="comment">//1.5</span></span><br></pre></td></tr></table></figure>

<p> ④数值型和布尔型转为字符串型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//转为字符串类型</span></span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> str=num.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str,<span class="keyword">typeof</span> str);<span class="comment">//&#x27;10&#x27;</span></span><br><span class="line"><span class="keyword">var</span> bool=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> str2=bool.toString();</span><br><span class="line"><span class="built_in">console</span>.log(str2,<span class="keyword">typeof</span> str2);<span class="comment">//&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2020/08/29/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>2020.10.2记</p>
<a id="more"></a>

<h3 id="1-web与internet的关系"><a href="#1-web与internet的关系" class="headerlink" title="1.web与internet的关系"></a>1.web与internet的关系</h3><p> internet 全球性计算机互联网络</p>
<p>俗称 互联网，因特网，交换网，交际网</p>
<p>www服务world wide web 万维网</p>
<p>ftp:文件的上传下载的服务</p>
<p>Email:电子邮件的服务</p>
<p>telnet：远程登陆的服务</p>
<p>BBS：电子公告板，俗称论坛</p>
<p>以上都是运行在internet应用程序</p>
<h3 id="2-internet上的应用程序都会分成两类"><a href="#2-internet上的应用程序都会分成两类" class="headerlink" title="2.internet上的应用程序都会分成两类"></a>2.internet上的应用程序都会分成两类</h3><p>(1)C/S  client 客户端  server服务器</p>
<p>王者荣耀  QQ.exe </p>
<p>(2)D/S browser浏览器 server服务器</p>
<p>所有的网站  网页版微信</p>
<p>(3)C/S结构和B/S结构的区别</p>
<p>C/S需要升级  B/S不需要升级</p>
<h3 id="3-web运行原理"><a href="#3-web运行原理" class="headerlink" title="3.web运行原理"></a>3.web运行原理</h3><p>web：运行在internet上的一种B/S结构的应用程序,俗称网站</p>
<p>internet:为web运行提供了网络环境</p>
<p>web运行的原理：基于浏览器和服务器，以及通信协议来实现数据的传输和展示</p>
<p>通信协议：规范了数据是如何打包和传递的</p>
<p>网页的通信协议 http://  https://</p>
<p> 服务器</p>
<p>(1)功能</p>
<p>存储数据、接收用户的请求，并且给出响应、提供程序的运行环境、具备一定的安全功能</p>
<p>(2)服务器产品</p>
<p>Apache–php、TOMCAT–java、IIS .net</p>
<p>(3)服务器端技术</p>
<p>nodejs、java、php 、.net、python</p>
<p>浏览器</p>
<p>(1)功能</p>
<p>代表用户发送请求、作为html，css和js的解析器、以图形化的界面展示给用户看</p>
<p>(2)浏览器产品</p>
<p>safari、chrome、firefox、opera、ie</p>
<p>(3)浏览器端的技术</p>
<p>html5、css3、javascript</p>
<h3 id="4-html的特点"><a href="#4-html的特点" class="headerlink" title="4.html的特点"></a>4.html的特点</h3><p><img src="/images/html/html%E7%9A%84%E7%89%B9%E7%82%B9.png"></p>
<p>(1)以.html或者.htm为后缀</p>
<p>(2)由浏览器解析执行</p>
<p>(3)用&lt;&gt;来定义标记</p>
<p>(4)可以嵌套js脚本</p>
<h3 id="5-html语法"><a href="#5-html语法" class="headerlink" title="5.html语法"></a>5.html语法</h3><p>标记：分为两类</p>
<p>(1).双标记（封闭类型标记）</p>
<p>&lt;关键字&gt;&lt;/关键字&gt;</p>
<p>双标记成对出现，有开有关</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ex:<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>(2).单标记(非封闭类型标记，空标记)</p>
<p>&lt;关键字&gt;  或者  &lt;关键字/&gt;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ex：<span class="tag">&lt;<span class="name">input</span>/&gt;</span>  <span class="tag">&lt;<span class="name">br</span>/&gt;</span>  <span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签的嵌套</p>
<p>在一对标签内部，出现另一对或者另一个标签，组合形成功能的叠加</p>
<p>学习html第二步，背嵌套顺序</p>
<p>语法：缩进，嵌套顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;标签1&gt;</span><br><span class="line"></span><br><span class="line"> &lt;标签2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;标签3&gt;&lt;&#x2F;标签3&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;标签2&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;标签1&gt;</span><br></pre></td></tr></table></figure>

<p>属性和值</p>
<p>通过属性和值，对标签进行修饰</p>
<p>&lt;标签 属性1=”值1” 属性2=”值2” …&gt;&lt;/标签&gt;</p>
<p>(1)标准属性，通用属性，所有标签都有的属性</p>
<p>id:定义元素在页面中唯一的标识</p>
<p>title：鼠标悬停在元素生显示的文本</p>
<p>style：css中，定义内联样式</p>
<p>class：css中，引用类选择器时使用</p>
<p>(2)专有属性，只针对一个标签起作用的属性</p>
<h3 id="6-html的文档结构"><a href="#6-html的文档结构" class="headerlink" title="6.html的文档结构"></a>6.html的文档结构</h3><p>html文档的构成</p>
<p>(1)文档类型声明</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>告诉浏览器，解析运行本篇代码，使用h5的规则解析</p>
<p>(2)网页的结构</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">表示网页的开始和结束。一个html文件中只能有一对html标签</span><br><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> 网页头部，定义网页的信息</span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span> 网页主体，展示内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>head标签，定义网页的信息</p>
<p>(1)<meta> 元数据标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;描述内容&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键字&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(2)其他标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span> 网页标题</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> 编写js或者引用js文件</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> css中定义内部样式</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>引入外部css样式</span><br></pre></td></tr></table></figure>

<p>(3)body元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">指定网页的主体</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">属性：bgcolor  body的背景颜色，取值颜色合法值</span><br><span class="line">      text    body的文本颜色，取值颜色的合法值</span><br></pre></td></tr></table></figure>

<h3 id="7-文本标记"><a href="#7-文本标记" class="headerlink" title="7.文本标记"></a>7.文本标记</h3><p>(1)标题元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">在页面中以醒目的方式显示文本</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span>   </span><br><span class="line">特点：1.字体大小有变化  h1最大，h6最小</span><br><span class="line">      2.字体加粗 </span><br><span class="line">      3.单独成行，上下有垂直间距</span><br><span class="line">属性：align 设置标记内容水平对齐方式</span><br><span class="line">      取值：left/center/right</span><br></pre></td></tr></table></figure>

<p>(2)段落标记</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span> 以突出的形式表示一段文字</span><br><span class="line">特点：1单独成行</span><br><span class="line">      2.上下有垂直间距</span><br><span class="line">属性：align:left/cener/right</span><br></pre></td></tr></table></figure>

<p>(3)换行标记</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">空格折叠现象：在html中，文本中不管有多少个空格和回车，都会被浏览器解析成一个空格显示</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span> 或者 <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>(4)特殊字体</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>  空格</span><br><span class="line"><span class="symbol">&amp;lt;</span>   <span class="tag">&lt;    </span></span><br><span class="line"><span class="tag">&amp;<span class="attr">gt</span>;  &gt;</span> </span><br><span class="line">&amp;times； X</span><br><span class="line"><span class="symbol">&amp;reg;</span> 商标注册 ®</span><br><span class="line">&amp;copy；版权 ©</span><br><span class="line"><span class="symbol">&amp;yen;</span></span><br></pre></td></tr></table></figure>

<p>(5)分割线，水平线</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>  或者  <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">属性  </span><br><span class="line">size=&quot;5px&quot;  取值px为单位的数字，水平线的粗细</span><br><span class="line">width=&quot;50%&quot;  取值px或者%,水平线的宽度</span><br><span class="line">align=&quot;left&quot;   left/center/right</span><br><span class="line">color=&quot;blue&quot; 取值为合法颜色值</span><br></pre></td></tr></table></figure>

<p>(6)预格式化</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">保留html代码中的回车和空格效果</span><br></pre></td></tr></table></figure>

<p>(7)文本样式标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span>         <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>   斜体</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span>  <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>  加粗</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span>         <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span>  删除线</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span>  下划线</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 上标</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span> 下标</span><br></pre></td></tr></table></figure>

<p>(8)分区元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">块分区<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>用于页面布局  </span><br><span class="line">行分区<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>为文本添加样式的时候用span</span><br></pre></td></tr></table></figure>

<p>(9)元素的显示方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">块级元素</span><br><span class="line">元素独立成行，在页面中从上往下排列</span><br><span class="line">ex:h1~h6  p  div  pre </span><br><span class="line">address – 地址</span><br><span class="line">blockquote – 块引用</span><br><span class="line">center – 举中对齐块</span><br><span class="line">dir – 目录列表</span><br><span class="line">div – 常用块级容易，也是CSS layout的主要标签</span><br><span class="line">dl – 定义列表</span><br><span class="line">fieldset – form控制组</span><br><span class="line">form – 交互表单</span><br><span class="line">h1 – 大标题</span><br><span class="line">h2 – 副标题</span><br><span class="line">h3 – 3级标题</span><br><span class="line">h4 – 4级标题</span><br><span class="line">h5 – 5级标题</span><br><span class="line">h6 – 6级标题</span><br><span class="line">hr – 水平分隔线</span><br><span class="line">isindex – input prompt</span><br><span class="line">menu – 菜单列表</span><br><span class="line">noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容</span><br><span class="line">noscript – 可选脚本内容（对于不支持script的浏览器显示此内容）</span><br><span class="line">ol – 有序表单</span><br><span class="line">p – 段落</span><br><span class="line">pre – 格式化文本</span><br><span class="line">table – 表格</span><br><span class="line">ul – 无序列表</span><br><span class="line"></span><br><span class="line">行内元素(行级元素)</span><br><span class="line">多个行内元素在一行中显示，从左往右排列</span><br><span class="line">ex:span i em strong b u sub sup del s</span><br><span class="line">a – 锚点</span><br><span class="line">abbr – 缩写</span><br><span class="line">acronym – 首字</span><br><span class="line">b – 粗体(不推荐)</span><br><span class="line">bdo – bidi override</span><br><span class="line">big – 大字体</span><br><span class="line">br – 换行</span><br><span class="line">cite – 引用</span><br><span class="line">code – 计算机代码(在引用源码的时候需要)</span><br><span class="line">dfn – 定义字段</span><br><span class="line">em – 强调</span><br><span class="line">font – 字体设定(不推荐)</span><br><span class="line">i – 斜体</span><br><span class="line">img – 图片</span><br><span class="line">input – 输入框</span><br><span class="line">kbd – 定义键盘文本</span><br><span class="line">label – 表格标签</span><br><span class="line">q – 短引用</span><br><span class="line">s – 中划线(不推荐)</span><br><span class="line">samp – 定义范例计算机代码</span><br><span class="line">select – 项目选择</span><br><span class="line">small – 小字体文本</span><br><span class="line">span – 常用内联容器，定义文本内区块</span><br><span class="line">strike – 中划线</span><br><span class="line">strong – 粗体强调</span><br><span class="line">sub – 下标</span><br><span class="line">sup – 上标</span><br><span class="line">textarea – 多行文本输入框</span><br><span class="line">tt – 电传文本</span><br><span class="line">u – 下划线</span><br><span class="line"></span><br><span class="line">行内块</span><br><span class="line">表现方式是行内元素(多个行内块可以共用一行)</span><br><span class="line">但是具有块级元素的其它特征(宽高，边距)</span><br><span class="line">ex:input</span><br><span class="line"></span><br><span class="line">table</span><br></pre></td></tr></table></figure>

<h3 id="8-图形和链接"><a href="#8-图形和链接" class="headerlink" title="8.图形和链接"></a>8.图形和链接</h3><p>(1)图形图像</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span>/&gt;</span> 或者 <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">属性：src 引用图片资源 url</span><br><span class="line">*.html和图片是兄弟关系，直接在src中写图片名称</span><br></pre></td></tr></table></figure>

<p>(2)URL(Uniform Resource Locator)</p>
<p>Uniform Resource Locator 统一资源定位器</p>
<p>就是路径</p>
<p>(3)绝对路径</p>
<p>完整的路径</p>
<p><strong>协议+主机名称+文件目录结构+文件具体的名称</strong></p>
<p>使用场合：使用网络资源的时候，使用绝对路径</p>
<p>使用网络资源图片</p>
<p>优点：节省服务器本地存储空间</p>
<p>缺点：资源不稳定</p>
<p>绝对路径使用本地的资源，是从最高盘符开始查找</p>
<p>c:\img\08.png</p>
<p>但是本服务器资源，在项目中，不能用绝对路径</p>
<p>(4)相对路径</p>
<p>使用本服务器资源，用相对路径</p>
<p>同级目录资源</p>
<p>直接使用资源名称 src=”08.png”</p>
<p>兄弟文件夹的子元素</p>
<p>直接使用兄弟文件夹的名称，在用/调用资源名称</p>
<p>src=”img/08.png”</p>
<p>父级目录中资源</p>
<p>先使用../返回上一级，在引用资源名称</p>
<p>src=”../08.png”</p>
<p><img src="/images/html/%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84.png"></p>
<p>(5)属性</p>
<p>src：source 源，资源路径</p>
<p>alt： 图片错误时，显示的文本</p>
<p>title：鼠标悬停时显示的文本</p>
<p>width：设置图片的宽度</p>
<p>height：设置图片的高度</p>
<p>如果设置宽高比，不符合图片原始宽高比，图片会产生失真效果</p>
<p>解决图片失真效果：一般情况下，width和height只设置一个，让另外一个自动适应</p>
<p>解决中文乱码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(6)链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">属性：href 链接路径</span><br><span class="line">target=&quot;_self&quot;指定打开链接的方式</span><br><span class="line">_self 默认值，在当前页面打开新网页</span><br><span class="line">_blank 在新的页面打开网页</span><br><span class="line">a标签的其它表现形式</span><br><span class="line">1.新建邮件，配合windows的邮件软件使用</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:cheng@t.com&quot;</span>&gt;</span>发邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">2.执行js</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:show()&quot;</span>&gt;</span>执行js<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">3.下载</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.zip&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">4.返回页面顶部</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>返回页面顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>(7)锚点</p>
<p>锚点是网页中的一个记号，可以通过超链接的方式，链接到锚点，让页面跳转到锚点位置显示</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.定义锚点</span><br><span class="line">第一种方式：任何标签的id中写锚点名称</span><br><span class="line"><span class="tag">&lt;<span class="name">Any</span> <span class="attr">id</span>=<span class="string">&quot;锚点名称&quot;</span>&gt;</span> <span class="tag">&lt;/ <span class="attr">Any</span> &gt;</span></span><br><span class="line">第二种方式：a标签的name属性中写锚点名称</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;锚点名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">2.链接到锚点</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">3.链接到其它页面的锚点</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;其它页面的url#锚点名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;02_a.html#hl&quot;</span>&gt;</span>葫芦娃<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h3><p>早期table用于布局，由于效率地下，后来被淘汰，使用div+css的布局，表格现在就一个单纯的作用，显示数据</p>
<p>语法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>    表格</span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>     行  table row</span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>  列 table data</span><br><span class="line">     ....</span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  ....</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">table的属性</span><br><span class="line">width=&quot;300px&quot;   表格的宽度</span><br><span class="line">height=&quot;300px&quot;  表格的高度</span><br><span class="line">border=&quot;1px&quot;    表格的边框</span><br><span class="line">align=&quot;left/center/right&quot;   表格的水平对齐方式</span><br><span class="line">bordercolor=&quot;red&quot; 边框颜色</span><br><span class="line">bgcolor=&quot;yellow&quot;  背景颜色</span><br><span class="line">cellpadding=&quot;2px&quot; 单元格内边距，内容到边框的距离2px</span><br><span class="line">cellspacing=&quot;5px&quot;  单元格的外边距，边框与边框的距离5px</span><br><span class="line"></span><br><span class="line">tr的属性</span><br><span class="line">bgcolor=&quot;yellow&quot;  背景颜色</span><br><span class="line">align=&quot;right&quot;  表格这一行的内容水平对齐方式</span><br><span class="line">valign表格这一行的内容垂直对齐方式</span><br><span class="line">取值  top/middle/bottom</span><br><span class="line"></span><br><span class="line">td的属性</span><br><span class="line">width=&quot;200px&quot; </span><br><span class="line">height=&quot;200px&quot; </span><br><span class="line">align=&quot;right&quot;   内容的水平对齐方式</span><br><span class="line">valign=&quot;bottom&quot; 内容的垂直对齐方式</span><br><span class="line">bgcolor=&quot;red&quot;</span><br><span class="line">colspan=&quot;2&quot;  跨2列</span><br><span class="line">rowspan=&quot;2&quot;  跨2行</span><br></pre></td></tr></table></figure>

<p>不规则的表格</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.跨列：colspan=”n”</span><br><span class="line">从指定单元格位置处开始，横向向右合并n个单元格(n包括自己)，被合并的单元格要删除</span><br><span class="line">2.跨行:rowspan=”n”</span><br><span class="line">从指定单元格位置处开始，纵向向下合并n个单元格(n包含自己)，被合并的单元格要删除</span><br></pre></td></tr></table></figure>

<p>可选标记</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1.表格的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">如果要设置标题，caption必须放在<span class="tag">&lt;<span class="name">table</span>&gt;</span>之后</span><br><span class="line">2.行/列的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span>,td的属性，th都可以用</span><br><span class="line">th的特点：文字加粗，水平居中</span><br></pre></td></tr></table></figure>

<p>表格的复杂应用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">我们制作的表格，浏览器解析的时候会自动添加上<span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>标签</span><br><span class="line">行分组：可以将连续的几行，划分到同一个组中，进行统一的管理。</span><br><span class="line">1.表头<span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">2.表主体<span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">3.表脚<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格的嵌套</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;</span><br><span class="line">....</span><br><span class="line">&lt;&#x2F;td&gt;</span><br><span class="line">表格中所有的嵌套，都只能放在td中完成</span><br></pre></td></tr></table></figure>

<h3 id="10-列表"><a href="#10-列表" class="headerlink" title="10.列表"></a>10.列表</h3><p>列表的作用</p>
<p>按照从上到下，或者从左到右来显示所有的数据，并且可以在数据前增加标识</p>
<p>列表的组成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">列表都是由列表类型和列表项来组成的</span><br><span class="line">1.列表类型</span><br><span class="line">  有序列表 <span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  order list</span><br><span class="line">  无序列表 <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  unorder list</span><br><span class="line">2.列表项</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>   list item</span><br></pre></td></tr></table></figure>

<p>有序列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">属性：type  指定标识项的类型 </span><br><span class="line">type=&quot;1&quot;</span><br><span class="line">取值 1 默认值，数字</span><br><span class="line">a/A 字母</span><br><span class="line">i/I 罗马数字</span><br><span class="line">start  指定起始编号 取值：无单位数字  </span><br></pre></td></tr></table></figure>

<p>无序列表-经常用于页面布局</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">属性：type 设置列表标识类型</span><br><span class="line">type=&quot;none&quot;</span><br><span class="line">取值 1.disc 默认值 实心圆</span><br><span class="line">2.circle 空心圆</span><br><span class="line">3.square 实心方块</span><br><span class="line">4.none  不显示</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScripts笔记</title>
    <url>/2020/08/28/JS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>JavsScripts笔记</p>
<a id="more"></a> 

<h4 id="创建一个9-9乘法口诀表"><a href="#创建一个9-9乘法口诀表" class="headerlink" title="创建一个9*9乘法口诀表"></a>创建一个9*9乘法口诀表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i&#x3D;1;i&lt;&#x3D;9;i++) &#x2F;&#x2F;创建外层循环，控制循环的行数-i</span><br><span class="line">&#123;</span><br><span class="line">    for(var j&#x3D;1,str&#x3D;&#39;&#39;;j&lt;&#x3D;i;j++)&#123; &#x2F;&#x2F;创建内层循环，控制循环的列数-j</span><br><span class="line">        str+&#x3D;j+&#39;*&#39;+i+&#39;&#x3D;&#39;+(i*j)+&#39;  &#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(str);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">1*2&#x3D;2  2*2&#x3D;4  </span><br><span class="line">1*3&#x3D;3  2*3&#x3D;6  3*3&#x3D;9  </span><br><span class="line">1*4&#x3D;4  2*4&#x3D;8  3*4&#x3D;12  4*4&#x3D;16  </span><br><span class="line">1*5&#x3D;5  2*5&#x3D;10  3*5&#x3D;15  4*5&#x3D;20  5*5&#x3D;25  </span><br><span class="line">1*6&#x3D;6  2*6&#x3D;12  3*6&#x3D;18  4*6&#x3D;24  5*6&#x3D;30  6*6&#x3D;36  </span><br><span class="line">1*7&#x3D;7  2*7&#x3D;14  3*7&#x3D;21  4*7&#x3D;28  5*7&#x3D;35  6*7&#x3D;42  7*7&#x3D;49  </span><br><span class="line">1*8&#x3D;8  2*8&#x3D;16  3*8&#x3D;24  4*8&#x3D;32  5*8&#x3D;40  6*8&#x3D;48  7*8&#x3D;56  8*8&#x3D;64  </span><br><span class="line">1*9&#x3D;9  2*9&#x3D;18  3*9&#x3D;27  4*9&#x3D;36  5*9&#x3D;45  6*9&#x3D;54  7*9&#x3D;63  8*9&#x3D;72  9*9&#x3D;81 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>利用阿里云搭建HEXO博客</title>
    <url>/2020/08/27/%E6%90%AD%E5%BB%BAHEXO%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/NoCortY/article/details/99631249">从零搭建Hexo博客并部署阿里云服务器</a></p>
<a id="more"></a> 

<p>some tips</p>
<h3 id="1-nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译"><a href="#1-nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译" class="headerlink" title="1.nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译"></a>1.nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译</h3><p>编译环境:Centos 7</p>
<h4 id="1-1-gcc安装"><a href="#1-1-gcc安装" class="headerlink" title="1.1.gcc安装"></a>1.1.gcc安装</h4><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id="1-2-PCRE-pcre-devel安装"><a href="#1-2-PCRE-pcre-devel安装" class="headerlink" title="1.2.PCRE pcre-devel安装"></a>1.2.PCRE pcre-devel安装</h4><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-3-zlib安装"><a href="#1-3-zlib安装" class="headerlink" title="1.3.zlib安装"></a>1.3.zlib安装</h4><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-4-OpenSSL安装"><a href="#1-4-OpenSSL安装" class="headerlink" title="1.4.OpenSSL安装"></a>1.4.OpenSSL安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-5-nginx安装配置"><a href="#1-5-nginx安装配置" class="headerlink" title="1.5.nginx安装配置"></a>1.5.nginx安装配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line">cd nginx-1.12.0</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>查找安装路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<p>启动和停止nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line">.&#x2F;nginx </span><br><span class="line">.&#x2F;nginx -s stop</span><br><span class="line">.&#x2F;nginx -s quit</span><br><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>查询nginx进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure>

<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">#在最后一行配置以下命令</span><br><span class="line">export NGINX_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">export PATH&#x3D;$PATH:$NGINX_HOME&#x2F;sbin</span><br><span class="line">#激活配置</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h3 id="2-创建GIT仓库中需要更改的地方"><a href="#2-创建GIT仓库中需要更改的地方" class="headerlink" title="2.创建GIT仓库中需要更改的地方"></a>2.创建GIT仓库中需要更改的地方</h3><p>创建一个git的仓库，并且新建一个post-receive文件</p>
<p>输入文件更改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x2F;home&#x2F;www&#x2F;tmp&#x2F;blog为你的临时文件存放目录</span><br><span class="line">#&#x2F;home&#x2F;www&#x2F;website为你的博客储存仓库</span><br><span class="line">GIT_REPO&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git</span><br><span class="line">TMP_GIT_CLONE&#x3D;&#x2F;home&#x2F;www&#x2F;tmp&#x2F;blog</span><br><span class="line">PUBLIC_WWW&#x3D;&#x2F;home&#x2F;www&#x2F;website</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;  $&#123;PUBLIC_WWW&#125;</span><br><span class="line">#保存并退出授予该文件可执行权限</span><br><span class="line">chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>最后在本地git推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>

<p>服务器端nginx重新加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>技术实现</category>
      </categories>
      <tags>
        <tag>BLOG</tag>
      </tags>
  </entry>
</search>
