<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SOME</title>
    <url>/2020/08/29/%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="/images/20200829.jpg"></p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScripts数据类型笔记</title>
    <url>/2020/08/30/Javascripts%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>2020.8.30记</p>
<a id="more"></a>

<h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><p> 数据分为原始类型和引用类型</p>
<p> 原始类型分为数值型、字符串型、布尔型、未定义型、空</p>
<h4 id="1-数值型"><a href="#1-数值型" class="headerlink" title="(1)数值型"></a>(1)数值型</h4><p> 分为整型和浮点型</p>
<p> 整型在内存中占4个字节，浮点型占8个字节</p>
<p> 八进制  以0开头， 例如 013 -&gt; 11</p>
<p> 十六进制  以0X开头，  例如  0XA -&gt; 10</p>
<p>  A<del>F 代表10</del>15   不区分大小写</p>
<p>  0XFF -&gt; 255</p>
<p> 浮点型分为普通小数和指数型小数</p>
<p>  3.14E6  -&gt;  31400000</p>
<p>  3.14E-6  -&gt;  0.00000314</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">var</span> num1=<span class="number">12</span>;<span class="comment">//12</span></span><br><span class="line"><span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="number">013</span>;<span class="comment">//11</span></span><br><span class="line"><span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="number">0XF</span>;<span class="comment">//15</span></span><br><span class="line"><span class="keyword">var</span> num5=<span class="number">3.14E6</span>;<span class="comment">//3140000  </span></span><br><span class="line"><span class="keyword">var</span> num6=<span class="number">3.14E-6</span>;<span class="comment">//0.00000314 </span></span><br></pre></td></tr></table></figure>

<p>typeof 检测数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num5=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num6);</span><br></pre></td></tr></table></figure>

<h4 id="2-字符串型"><a href="#2-字符串型" class="headerlink" title="(2)字符串型"></a>(2)字符串型</h4><p> 数据被引号包含就是字符串类型，不区分单双引号</p>
<p>  查看任意一个字符的Unicode码</p>
<p>   ‘a’.charCodeAt()  //97]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">&#x27;字&#x27;</span>.charCodeAt() );<span class="comment">//查看自己姓名的Unicode码</span></span><br></pre></td></tr></table></figure>

<h4 id="3-布尔型"><a href="#3-布尔型" class="headerlink" title="(3)布尔型"></a>(3)布尔型</h4><p> true/false</p>
<p> 在程序中表示真或者假</p>
<p> 一般用于是否的结果，例如是否登录，是否注册，是否在售，是否为会员…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isLogin=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> isIndex=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isLogin,<span class="keyword">typeof</span> isIndex);</span><br></pre></td></tr></table></figure>

<h4 id="4-未定义型"><a href="#4-未定义型" class="headerlink" title="(4)未定义型"></a>(4)未定义型</h4><p> 声明了变量未赋值，结果就是undefined </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age;</span><br><span class="line"><span class="built_in">console</span>.log(age,<span class="keyword">typeof</span> age);</span><br></pre></td></tr></table></figure>

<h4 id="5-空——null"><a href="#5-空——null" class="headerlink" title="(5)空——null"></a>(5)空——null</h4><p> 常和引用类型数据一起使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-数据类型转换"><a href="#2-数据类型转换" class="headerlink" title="2.数据类型转换"></a>2.数据类型转换</h3><h4 id="1-隐式转换"><a href="#1-隐式转换" class="headerlink" title="(1)隐式转换"></a>(1)隐式转换</h4><p>  ①数字+字符串  数字转换成字符串</p>
<p>   1+’2’  // ‘12’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1=<span class="number">1</span>+<span class="string">&#x27;2&#x27;</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str1,<span class="keyword">typeof</span> str1);<span class="comment">// &#x27;12&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  ②数字+布尔型  布尔型转成数字 true-&gt;1 false-&gt;0</p>
<p>   3+true  //4</p>
<p>   3+false  //3</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">3</span>+<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num,<span class="keyword">typeof</span> num);</span><br></pre></td></tr></table></figure>

<p>  ③字符串+布尔型 布尔型转成字符串</p>
<p>   ‘5’+true  //‘5true’</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str3=<span class="string">&#x27;5&#x27;</span>+<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3,<span class="keyword">typeof</span> str3);<span class="comment">//&#x27;5true&#x27;</span></span><br></pre></td></tr></table></figure>

<p>  JS中加号(+)的作用</p>
<p>   执行加法运算</p>
<p>   执行字符串拼接</p>
<p>  减法(-)、乘法(*)、除法(/) 隐式换行</p>
<p>   将运算符两端的数据转为数值型(自动调用Number)，如果转换失败，返回NaN(Not a Number)，不是一个数字，任何值和NaN执行减乘除运算符都会返回NaN</p>
<h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="(2)强制转换"></a>(2)强制转换</h4><p> ①将任意的数据强制转为数值型</p>
<p>  Number()</p>
<p>Number(‘a’);  //NaNNumber(‘1’);  //1Number(‘1a’);  //NaNNumber(undefined);  //NaNNumber(null);  //0Number(true);  //1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将任意的数据强制转为数值型</span></span><br><span class="line"><span class="keyword">var</span> num1=<span class="built_in">Number</span>(<span class="string">&#x27;a&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num2=<span class="built_in">Number</span>(<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num3=<span class="built_in">Number</span>(<span class="literal">null</span>);<span class="comment">//0</span></span><br><span class="line"><span class="keyword">var</span> num4=<span class="built_in">Number</span>(<span class="literal">true</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> num5=<span class="built_in">Number</span>(<span class="string">&#x27;1a&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(num5,<span class="keyword">typeof</span> num5);</span><br></pre></td></tr></table></figure>

<p> ②将数据转为整型</p>
<p>  parseInt()</p>
<p>  常用于将字符串或数字转为整型，其它的数据返回NaN；如果要转换的字符串以非数字开头，也返回NaN</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//强制转为整型</span></span><br><span class="line"><span class="keyword">var</span> num6=<span class="built_in">parseInt</span>(<span class="string">&#x27;3.5&#x27;</span>);<span class="comment">//3</span></span><br><span class="line"><span class="keyword">var</span> num7=<span class="built_in">parseInt</span>(<span class="string">&#x27;1a&#x27;</span>);<span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> num8=<span class="built_in">parseInt</span>(<span class="string">&#x27;a1&#x27;</span>);<span class="comment">//NaN</span></span><br><span class="line"><span class="keyword">var</span> num9=<span class="built_in">parseInt</span>(<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>

<p> ③将数据转为浮点型</p>
<p>  parseFloat()</p>
<p>  和parseInt的用法基本一致，只是转的数据是浮点型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gghg</span><br></pre></td></tr></table></figure>



<p> ④数值型和布尔型转为字符串型</p>
<p>  toString()</p>
<p>  var num=10;</p>
<p>  num.toString();  // ‘10’</p>
]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2020/08/29/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JavaScripts笔记</title>
    <url>/2020/08/28/JS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>JavsScripts笔记</p>
<a id="more"></a> 

<h4 id="创建一个9-9乘法口诀表"><a href="#创建一个9-9乘法口诀表" class="headerlink" title="创建一个9*9乘法口诀表"></a>创建一个9*9乘法口诀表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i&#x3D;1;i&lt;&#x3D;9;i++) &#x2F;&#x2F;创建外层循环，控制循环的行数-i</span><br><span class="line">&#123;</span><br><span class="line">    for(var j&#x3D;1,str&#x3D;&#39;&#39;;j&lt;&#x3D;i;j++)&#123; &#x2F;&#x2F;创建内层循环，控制循环的列数-j</span><br><span class="line">        str+&#x3D;j+&#39;*&#39;+i+&#39;&#x3D;&#39;+(i*j)+&#39;  &#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(str);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*打印结果</span><br><span class="line">1*2&#x3D;2  2*2&#x3D;4  </span><br><span class="line">1*3&#x3D;3  2*3&#x3D;6  3*3&#x3D;9  </span><br><span class="line">1*4&#x3D;4  2*4&#x3D;8  3*4&#x3D;12  4*4&#x3D;16  </span><br><span class="line">1*5&#x3D;5  2*5&#x3D;10  3*5&#x3D;15  4*5&#x3D;20  5*5&#x3D;25  </span><br><span class="line">1*6&#x3D;6  2*6&#x3D;12  3*6&#x3D;18  4*6&#x3D;24  5*6&#x3D;30  6*6&#x3D;36  </span><br><span class="line">1*7&#x3D;7  2*7&#x3D;14  3*7&#x3D;21  4*7&#x3D;28  5*7&#x3D;35  6*7&#x3D;42  7*7&#x3D;49  </span><br><span class="line">1*8&#x3D;8  2*8&#x3D;16  3*8&#x3D;24  4*8&#x3D;32  5*8&#x3D;40  6*8&#x3D;48  7*8&#x3D;56  8*8&#x3D;64  </span><br><span class="line">1*9&#x3D;9  2*9&#x3D;18  3*9&#x3D;27  4*9&#x3D;36  5*9&#x3D;45  6*9&#x3D;54  7*9&#x3D;63  8*9&#x3D;72  9*9&#x3D;81 </span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScripts</category>
      </categories>
      <tags>
        <tag>JavaScripts</tag>
      </tags>
  </entry>
  <entry>
    <title>利用阿里云搭建HEXO博客</title>
    <url>/2020/08/27/%E6%90%AD%E5%BB%BAHEXO%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/NoCortY/article/details/99631249">从零搭建Hexo博客并部署阿里云服务器</a></p>
<a id="more"></a> 

<p>some tips</p>
<h3 id="1-nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译"><a href="#1-nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译" class="headerlink" title="1.nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译"></a>1.nginx服务器环境搭建，这里我们选择下载nginx安装包进行编译</h3><p>编译环境:Centos 7</p>
<h4 id="1-1-gcc安装"><a href="#1-1-gcc安装" class="headerlink" title="1.1.gcc安装"></a>1.1.gcc安装</h4><p>安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install gcc-c++</span><br></pre></td></tr></table></figure>

<h4 id="1-2-PCRE-pcre-devel安装"><a href="#1-2-PCRE-pcre-devel安装" class="headerlink" title="1.2.PCRE pcre-devel安装"></a>1.2.PCRE pcre-devel安装</h4><p>PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y pcre pcre-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-3-zlib安装"><a href="#1-3-zlib安装" class="headerlink" title="1.3.zlib安装"></a>1.3.zlib安装</h4><p>zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-4-OpenSSL安装"><a href="#1-4-OpenSSL安装" class="headerlink" title="1.4.OpenSSL安装"></a>1.4.OpenSSL安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure>

<h4 id="1-5-nginx安装配置"><a href="#1-5-nginx安装配置" class="headerlink" title="1.5.nginx安装配置"></a>1.5.nginx安装配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.12.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line">cd nginx-1.12.0</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>查找安装路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whereis nginx</span><br></pre></td></tr></table></figure>

<p>启动和停止nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</span><br><span class="line">.&#x2F;nginx </span><br><span class="line">.&#x2F;nginx -s stop</span><br><span class="line">.&#x2F;nginx -s quit</span><br><span class="line">.&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>查询nginx进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps aux|grep nginx</span><br></pre></td></tr></table></figure>

<p>添加环境变量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">#在最后一行配置以下命令</span><br><span class="line">PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">export PATH</span><br><span class="line">#激活配置</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>

<h3 id="2-创建GIT仓库中需要更改的地方"><a href="#2-创建GIT仓库中需要更改的地方" class="headerlink" title="2.创建GIT仓库中需要更改的地方"></a>2.创建GIT仓库中需要更改的地方</h3><p>创建一个git的仓库，并且新建一个post-receive文件</p>
<p>输入文件更改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x2F;home&#x2F;www&#x2F;tmp&#x2F;blog为你的临时文件存放目录</span><br><span class="line">#&#x2F;home&#x2F;www&#x2F;website为你的博客储存仓库</span><br><span class="line">GIT_REPO&#x3D;&#x2F;home&#x2F;git&#x2F;blog.git</span><br><span class="line">TMP_GIT_CLONE&#x3D;&#x2F;home&#x2F;www&#x2F;tmp&#x2F;blog</span><br><span class="line">PUBLIC_WWW&#x3D;&#x2F;home&#x2F;www&#x2F;website</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;  $&#123;PUBLIC_WWW&#125;</span><br><span class="line">#保存并退出授予该文件可执行权限</span><br><span class="line">chmod +x ~&#x2F;blog.git&#x2F;hooks&#x2F;post-receive</span><br></pre></td></tr></table></figure>

<p>最后在本地git推送</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>

<p>服务器端nginx重新加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>技术实现</category>
      </categories>
      <tags>
        <tag>BLOG</tag>
      </tags>
  </entry>
</search>
